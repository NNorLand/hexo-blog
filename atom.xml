<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萝卜坑</title>
  <icon>https://www.gravatar.com/avatar/cb9e138e5ad5ac818ee8a1553cb5bdec</icon>
  <subtitle>Talk is cheap. Show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nnorland.github.io/"/>
  <updated>2020-03-17T06:16:58.000Z</updated>
  <id>https://nnorland.github.io/</id>
  
  <author>
    <name>刘家安</name>
    <email>liujiaan.d@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript高阶函数</title>
    <link href="https://nnorland.github.io/2020/03/17/higher-func/"/>
    <id>https://nnorland.github.io/2020/03/17/higher-func/</id>
    <published>2020-03-17T06:16:58.000Z</published>
    <updated>2020-03-17T06:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高阶函数定义"><a href="#高阶函数定义" class="headerlink" title="高阶函数定义"></a>高阶函数定义</h2><p>高阶函数英文叫 Higher-order function。高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者返回它们。简单总结为高阶函数是一个接收函数作为参数或者将函数作为返回输出的函数。<br>Array.prototype.map，Array.prototype.filter，Array.prototype.reduce和Array.prototype.sort是JavaScript中内置的高阶函数。它们接受一个函数作为参数，并应用这个函数到列表的每一个元素。下面是一些内置高阶函数的具体说明讲解，以及和不使用高阶函数情况下的对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isString = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object String]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isArray = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object Array]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isNumber = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object Number]'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isType = <span class="function"><span class="params">type</span> =&gt;</span> <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call( obj ) === <span class="string">'[object '</span> + type + <span class="string">']'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isType(<span class="string">'String'</span>)(<span class="string">'123'</span>);        <span class="comment">// true</span></span><br><span class="line">isType(<span class="string">'Array'</span>)([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);    <span class="comment">// true</span></span><br><span class="line">isType(<span class="string">'Number'</span>)(<span class="number">123</span>);            <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS实现一个无限累加的add函数</span></span><br><span class="line">add(<span class="number">1</span>)  <span class="comment">//1 </span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)  <span class="comment">//3</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)  <span class="comment">//6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">b</span>) </span>&#123; <span class="comment">// 使用闭包</span></span><br><span class="line">        a = a + b; <span class="comment">// 累加</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">     &#125;</span><br><span class="line">     sum.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 重写toString()方法</span></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> sum; <span class="comment">// 返回一个函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>);  <span class="comment">// 3</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)； <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动实现map函数</span></span><br><span class="line"><span class="keyword">const</span> strArray=[<span class="string">'JavaScript'</span>,<span class="string">'PHP'</span>,<span class="string">'JAVA'</span>,<span class="string">'C'</span>,<span class="string">'Python'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapForEach</span>(<span class="params">arr,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newArray = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">        newArray.push(&#123;</span><br><span class="line">            fn(arr[i])</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lenArray = mapForEach(strArray,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lenArray);<span class="comment">//[10,3,4,1,6]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;高阶函数定义&quot;&gt;&lt;a href=&quot;#高阶函数定义&quot; class=&quot;headerlink&quot; title=&quot;高阶函数定义&quot;&gt;&lt;/a&gt;高阶函数定义&lt;/h2&gt;&lt;p&gt;高阶函数英文叫 Higher-order function。高阶函数是对其他函数进行操作的函数，操作可以是将
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-javascript</title>
    <link href="https://nnorland.github.io/2020/01/21/JavaScript/clean-code-javascript/"/>
    <id>https://nnorland.github.io/2020/01/21/JavaScript/clean-code-javascript/</id>
    <published>2020-01-21T09:13:30.000Z</published>
    <updated>2020-01-21T09:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载<br>来自<a href="https://github.com/alivebao/clean-code-js" target="_blank" rel="noopener">alivebao/clean-code-js</a></p></blockquote><p>Original Repository: <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">ryanmcdermott/clean-code-javascript</a></p><h1 id="JavaScript-风格指南"><a href="#JavaScript-风格指南" class="headerlink" title="JavaScript 风格指南"></a>JavaScript 风格指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#介绍">介绍</a></li><li><a href="#变量">变量</a></li><li><a href="#函数">函数</a></li><li><a href="#objects-and-data-structures">对象和数据结构</a></li><li><a href="#类">类</a></li><li><a href="#测试">测试</a></li><li><a href="#并发">并发</a></li><li><a href="#错误处理">错误处理</a></li><li><a href="#格式化">格式化</a></li><li><a href="#注释">注释</a></li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/ryanmcdermott" target="_blank" rel="noopener">作者</a>根据 Robert C. Martin <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="noopener"><em>《代码整洁之道》</em></a>总结了适用于 JavaScript 的软件工程原则<a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">《Clean Code JavaScript》</a>。</p><p>本文是对其的翻译。</p><p>不必严格遵守本文的所有原则，有时少遵守一些效果可能会更好，具体应根据实际情况决定。这是根据《代码整洁之道》作者多年经验整理的代码优化建议，但也仅仅只是一份建议。</p><p>软件工程已经发展了 50 多年，至今仍在不断前进。现在，把这些原则当作试金石，尝试将他们作为团队代码质量考核的标准之一吧。</p><p>最后你需要知道的是，这些东西不会让你立刻变成一个优秀的工程师，长期奉行他们也并不意味着你能够高枕无忧不再犯错。千里之行，始于足下。我们需要时常和同行们进行代码评审，不断优化自己的代码。不要惧怕改善代码质量所需付出的努力，加油。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="使用有意义，可读性好的变量名"><a href="#使用有意义，可读性好的变量名" class="headerlink" title="使用有意义，可读性好的变量名"></a>使用有意义，可读性好的变量名</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yyyymmdstr = moment().format(<span class="string">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yearMonthDay = moment().format(<span class="string">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-ES6-的-const-定义常量"><a href="#使用-ES6-的-const-定义常量" class="headerlink" title="使用 ES6 的 const 定义常量"></a>使用 ES6 的 const 定义常量</h3><p>反例中使用”var”定义的”常量”是可变的。</p><p>在声明一个常量时，该常量在整个程序中都应该是不可变的。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FIRST_US_PRESIDENT = <span class="string">"George Washington"</span>;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FIRST_US_PRESIDENT = <span class="string">"George Washington"</span>;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="对功能类似的变量名采用统一的命名风格"><a href="#对功能类似的变量名采用统一的命名风格" class="headerlink" title="对功能类似的变量名采用统一的命名风格"></a>对功能类似的变量名采用统一的命名风格</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo();</span><br><span class="line">getClientData();</span><br><span class="line">getCustomerRecord();</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUser();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用易于检索名称"><a href="#使用易于检索名称" class="headerlink" title="使用易于检索名称"></a>使用易于检索名称</h3><p>我们需要阅读的代码远比自己写的要多，使代码拥有良好的可读性且易于检索非常重要。阅读变量名晦涩难懂的代码对读者来说是一种相当糟糕的体验。<br>让你的变量名易于检索。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 525600 是什么?</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">525600</span>; i++) &#123;</span><br><span class="line">  runCronJob();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized `var` globals.</span></span><br><span class="line"><span class="keyword">var</span> MINUTES_IN_A_YEAR = <span class="number">525600</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; MINUTES_IN_A_YEAR; i++) &#123;</span><br><span class="line">  runCronJob();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用说明变量-即有意义的变量名"><a href="#使用说明变量-即有意义的变量名" class="headerlink" title="使用说明变量(即有意义的变量名)"></a>使用说明变量(即有意义的变量名)</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cityStateRegex = <span class="regexp">/^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line">saveCityState(cityStateRegex.match(cityStateRegex)[<span class="number">1</span>], cityStateRegex.match(cityStateRegex)[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line"><span class="keyword">var</span> cityStateRegex = <span class="regexp">/^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/</span>;</span><br><span class="line"><span class="keyword">var</span> match = ADDRESS.match(cityStateRegex)</span><br><span class="line"><span class="keyword">var</span> city = match[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> state = match[<span class="number">2</span>];</span><br><span class="line">saveCityState(city, state);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要绕太多的弯子"><a href="#不要绕太多的弯子" class="headerlink" title="不要绕太多的弯子"></a>不要绕太多的弯子</h3><p>显式优于隐式。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line">locations.forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">  doStuff();</span><br><span class="line">  doSomeOtherStuff();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// l是什么？</span></span><br><span class="line">  dispatch(l);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line">locations.forEach(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span><br><span class="line">  doStuff();</span><br><span class="line">  doSomeOtherStuff();</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  dispatch(location);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免重复的描述"><a href="#避免重复的描述" class="headerlink" title="避免重复的描述"></a>避免重复的描述</h3><p>当类/对象名已经有意义时，对其变量进行命名不需要再次重复。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = &#123;</span><br><span class="line">  carMake: <span class="string">'Honda'</span>,</span><br><span class="line">  carModel: <span class="string">'Accord'</span>,</span><br><span class="line">  carColor: <span class="string">'Blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.carColor = <span class="string">'Red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = &#123;</span><br><span class="line">  make: <span class="string">'Honda'</span>,</span><br><span class="line">  model: <span class="string">'Accord'</span>,</span><br><span class="line">  color: <span class="string">'Blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintCar</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">  car.color = <span class="string">'Red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免无意义的条件判断"><a href="#避免无意义的条件判断" class="headerlink" title="避免无意义的条件判断"></a>避免无意义的条件判断</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> breweryName;</span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    breweryName = name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    breweryName = <span class="string">'Hipster Brew Co.'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> breweryName = name || <span class="string">'Hipster Brew Co.'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><h3 id="函数参数-理想情况下应不超过-2-个"><a href="#函数参数-理想情况下应不超过-2-个" class="headerlink" title="函数参数 (理想情况下应不超过 2 个)"></a>函数参数 (理想情况下应不超过 2 个)</h3><p>限制函数参数数量很有必要，这么做使得在测试函数时更加轻松。过多的参数将导致难以采用有效的测试用例对函数的各个参数进行测试。</p><p>应避免三个以上参数的函数。通常情况下，参数超过两个意味着函数功能过于复杂，这时需要重新优化你的函数。当确实需要多个参数时，大多情况下可以考虑这些参数封装成一个对象。</p><p>JS 定义对象非常方便，当需要多个参数时，可以使用一个对象进行替代。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">'Foo'</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">menuConfig</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数功能的单一性"><a href="#函数功能的单一性" class="headerlink" title="函数功能的单一性"></a>函数功能的单一性</h3><p>这是软件功能中最重要的原则之一。</p><p>功能不单一的函数将导致难以重构、测试和理解。功能单一的函数易于重构，并使代码更加干净。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function"><span class="params">client</span> =&gt;</span> &#123;</span><br><span class="line">    emailClientIfNeeded(client);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClientIfNeeded</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isClientActive(client)) &#123;</span><br><span class="line">    email(client);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数名应明确表明其功能"><a href="#函数名应明确表明其功能" class="headerlink" title="函数名应明确表明其功能"></a>函数名应明确表明其功能</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateAdd</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很难理解dateAdd(date, 1)是什么意思</span></span><br><span class="line">dateAdd(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateAddMonth</span>(<span class="params">date, month</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">dateAddMonth(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="函数应该只做一层抽象"><a href="#函数应该只做一层抽象" class="headerlink" title="函数应该只做一层抽象"></a>函数应该只做一层抽象</h3><p>当函数的需要的抽象多于一层时通常意味着函数功能过于复杂，需将其进行分解以提高其可重用性和可测试性。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> REGEXES = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">let</span> tokens;</span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">REGEX</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ast;</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> REGEXES = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> statements = code.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">let</span> tokens;</span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">REGEX</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ast;</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">let</span> ast = lexer(tokens);</span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="移除重复的代码"><a href="#移除重复的代码" class="headerlink" title="移除重复的代码"></a>移除重复的代码</h3><p>永远、永远、永远不要在任何循环下有重复的代码。</p><p>这种做法毫无意义且潜在危险极大。重复的代码意味着逻辑变化时需要对不止一处进行修改。JS 弱类型的特点使得函数拥有更强的普适性。好好利用这一优点吧。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function"><span class="params">developer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">var</span> githubLink = developer.getGithubLink();</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      githubLink: githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function"><span class="params">manager</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">var</span> portfolio = manager.getMBAProjects();</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      portfolio: portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span>(<span class="params">employees</span>) </span>&#123;</span><br><span class="line">  employees.forEach(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">var</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">var</span> portfolio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (employee.type === <span class="string">'manager'</span>) &#123;</span><br><span class="line">      portfolio = employee.getMBAProjects();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      portfolio = employee.getGithubLink();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      expectedSalary: expectedSalary,</span><br><span class="line">      experience: experience,</span><br><span class="line">      portfolio: portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="采用默认参数精简代码"><a href="#采用默认参数精简代码" class="headerlink" title="采用默认参数精简代码"></a>采用默认参数精简代码</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeForumComment</span>(<span class="params">subject, body</span>) </span>&#123;</span><br><span class="line">  subject = subject || <span class="string">'No Subject'</span>;</span><br><span class="line">  body = body || <span class="string">'No text'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeForumComment</span>(<span class="params">subject = <span class="string">'No subject'</span>, body = <span class="string">'No text'</span></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-Object-assign-设置默认对象"><a href="#使用-Object-assign-设置默认对象" class="headerlink" title="使用 Object.assign 设置默认对象"></a>使用 Object.assign 设置默认对象</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="literal">null</span>,</span><br><span class="line">  body: <span class="string">'Bar'</span>,</span><br><span class="line">  buttonText: <span class="literal">null</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">'Foo'</span></span><br><span class="line">  config.body = config.body || <span class="string">'Bar'</span></span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">'Baz'</span></span><br><span class="line">  config.cancellable = config.cancellable === <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menuConfig = &#123;</span><br><span class="line">  title: <span class="string">'Order'</span>,</span><br><span class="line">  <span class="comment">// User did not include 'body' key</span></span><br><span class="line">  buttonText: <span class="string">'Send'</span>,</span><br><span class="line">  cancellable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    title: <span class="string">'Foo'</span>,</span><br><span class="line">    body: <span class="string">'Bar'</span>,</span><br><span class="line">    buttonText: <span class="string">'Baz'</span>,</span><br><span class="line">    cancellable: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// config now equals: &#123;title: "Order", body: "Bar", buttonText: "Send", cancellable: true&#125;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(menuConfig);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要使用标记-Flag-作为函数参数"><a href="#不要使用标记-Flag-作为函数参数" class="headerlink" title="不要使用标记(Flag)作为函数参数"></a>不要使用标记(Flag)作为函数参数</h3><p>这通常意味着函数的功能的单一性已经被破坏。此时应考虑对函数进行再次划分。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name, temp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">'./temp/'</span> + name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(<span class="string">'./temp/'</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h3><p>当函数产生了除了“接受一个值并返回一个结果”之外的行为时，称该函数产生了副作用。比如写文件、修改全局变量或将你的钱全转给了一个陌生人等。</p><p>程序在某些情况下确实需要副作用这一行为，如先前例子中的写文件。这时应该将这些功能集中在一起，不要用多个函数/类修改某个文件。用且只用一个 service 完成这一需求。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = name.split(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoFirstAndLastName();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Ryan McDermott'</span></span><br><span class="line"><span class="keyword">var</span> newName = splitIntoFirstAndLastName(name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'Ryan McDermott';</span></span><br><span class="line"><span class="built_in">console</span>.log(newName); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在 JS 中污染全局是一个非常不好的实践，这么做可能和其他库起冲突，且调用你的 API 的用户在实际环境中得到一个 exception 前对这一情况是一无所知的。</p><p>想象以下例子：如果你想扩展 JS 中的 Array，为其添加一个 <code>diff</code> 函数显示两个数组间的差异，此时应如何去做？你可以将 diff 写入 <code>Array.prototype</code>，但这么做会和其他有类似需求的库造成冲突。如果另一个库对 diff 的需求为比较一个数组中首尾元素间的差异呢？</p><p>使用 ES6 中的 class 对全局的 Array 做简单的扩展显然是一个更棒的选择。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span>(<span class="params">comparisonArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = [];</span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> comparisonArray) &#123;</span><br><span class="line">    hash[i] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hash[i]) &#123;</span><br><span class="line">      values.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  diff(comparisonArray) &#123;</span><br><span class="line">    <span class="keyword">var</span> values = [];</span><br><span class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> comparisonArray) &#123;</span><br><span class="line">      hash[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hash[i]) &#123;</span><br><span class="line">        values.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="采用函数式编程"><a href="#采用函数式编程" class="headerlink" title="采用函数式编程"></a>采用函数式编程</h3><p>函数式的编程具有更干净且便于测试的特点。尽可能的使用这种风格吧。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; programmerOutput.length; i++) &#123;</span><br><span class="line">  totalOutput += programmerOutput[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> programmerOutput = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'Uncle Bobby'</span>,</span><br><span class="line">    linesOfCode: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Suzie Q'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Jimmy Gosling'</span>,</span><br><span class="line">    linesOfCode: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'Gracie Hopper'</span>,</span><br><span class="line">    linesOfCode: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> totalOutput = programmerOutput</span><br><span class="line">  .map(<span class="function">(<span class="params">programmer</span>) =&gt;</span> programmer.linesOfCode)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, linesOfCode</span>) =&gt;</span> acc + linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="封装判断条件"><a href="#封装判断条件" class="headerlink" title="封装判断条件"></a>封装判断条件</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class="line">  <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldShowSpinner</span>(<span class="params">fsm, listNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fsm.state === <span class="string">'fetching'</span> &amp;&amp; isEmpty(listNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免“否定情况”的判断"><a href="#避免“否定情况”的判断" class="headerlink" title="避免“否定情况”的判断"></a>避免“否定情况”的判断</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h3><p>这看起来似乎不太可能。</p><p>大多人听到这的第一反应是：“怎么可能不用 if 完成其他功能呢？”许多情况下通过使用多态(polymorphism)可以达到同样的目的。</p><p>第二个问题在于采用这种方式的原因是什么。答案是我们之前提到过的：保持函数功能的单一性。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude() - getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">        <span class="keyword">return</span> getMaxAltitude() - getFuelExpenditure();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude() - getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getCruisingAltitude() &#123;</span><br><span class="line">    <span class="keyword">return</span> getMaxAltitude() - getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免类型判断-part-1"><a href="#避免类型判断-part-1" class="headerlink" title="避免类型判断(part 1)"></a>避免类型判断(part 1)</h3><p>JS 是弱类型语言，这意味着函数可接受任意类型的参数。</p><p>有时这会对你带来麻烦，你会对参数做一些类型判断。有许多方法可以避免这些情况。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">    vehicle.peddle(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">    vehicle.drive(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle</span>) </span>&#123;</span><br><span class="line">  vehicle.move(<span class="keyword">this</span>.currentLocation, <span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免类型判断-part-2"><a href="#避免类型判断-part-2" class="headerlink" title="避免类型判断(part 2)"></a>避免类型判断(part 2)</h3><p>如果需处理的数据为字符串，整型，数组等类型，无法使用多态并仍有必要对其进行类型检测时，可以考虑使用 TypeScript。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val1 == <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> val2 == <span class="string">"number"</span> ||</span><br><span class="line">      <span class="keyword">typeof</span> val1 == <span class="string">"string"</span> &amp;&amp; <span class="keyword">typeof</span> val2 == <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val1 + val2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must be of type String or Number'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">val1, val2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val1 + val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免过度优化"><a href="#避免过度优化" class="headerlink" title="避免过度优化"></a>避免过度优化</h3><p>现代的浏览器在运行时会对代码自动进行优化。有时人为对代码进行优化可能是在浪费时间。</p><p><a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="noopener">这里可以找到许多真正需要优化的地方</a></p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这里使用变量len是因为在老式浏览器中，</span></span><br><span class="line"><span class="comment">// 直接使用正例中的方式会导致每次循环均重复计算list.length的值，</span></span><br><span class="line"><span class="comment">// 而在现代浏览器中会自动完成优化，这一行为是没有必要的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="删除无效的代码"><a href="#删除无效的代码" class="headerlink" title="删除无效的代码"></a>删除无效的代码</h3><p>不再被调用的代码应及时删除。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = newRequestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = newRequestModule;</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a><strong>对象和数据结构</strong></h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>JS 没有接口或类型，因此实现这一模式是很困难的，因为我们并没有类似 <code>public</code> 和 <code>private</code> 的关键词。</p><p>然而，使用 getters 和 setters 获取对象的数据远比直接使用点操作符具有优势。为什么呢？</p><ol><li>当需要对获取的对象属性执行额外操作时。</li><li>执行 <code>set</code> 时可以增加规则对要变量的合法性进行判断。</li><li>封装了内部逻辑。</li><li>在存取时可以方便的增加日志和错误处理。</li><li>继承该类时可以重载默认行为。</li><li>从服务器获取数据时可以进行懒加载。</li></ol><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="keyword">this</span>.balance = <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">bankAccount.balance = bankAccount.balance - <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">   <span class="keyword">this</span>.balance = <span class="number">1000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// It doesn't have to be prefixed with `get` or `set` to be a getter/setter</span></span><br><span class="line">  withdraw(amount) &#123;</span><br><span class="line">  <span class="keyword">if</span> (verifyAmountCanBeDeducted(amount)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">bankAccount.withdraw(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="让对象拥有私有成员"><a href="#让对象拥有私有成员" class="headerlink" title="让对象拥有私有成员"></a>让对象拥有私有成员</h3><p>可以通过闭包完成</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> Employee = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Employee.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: undefined</span></span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Employee = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Employee</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Employee;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br><span class="line"><span class="keyword">delete</span> employee.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Employee name: '</span> + employee.getName()); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>如《代码整洁之道》一书中所述，“修改一个类的理由不应该超过一个”。</p><p>将多个功能塞进一个类的想法很诱人，但这将导致你的类无法达到概念上的内聚，并经常不得不进行修改。</p><p>最小化对一个类需要修改的次数是非常有必要的。如果一个类具有太多太杂的功能，当你对其中一小部分进行修改时，将很难想象到这一修够对代码库中依赖该类的其他模块会带来什么样的影响。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.verifyCredentials(user)) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials(user) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  verifyCredentials() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">    <span class="keyword">this</span>.auth = <span class="keyword">new</span> UserAuth(user)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeSettings(settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="开-闭原则-OCP"><a href="#开-闭原则-OCP" class="headerlink" title="开/闭原则 (OCP)"></a>开/闭原则 (OCP)</h3><p>“代码实体(类，模块，函数等)应该易于扩展，难于修改。”</p><p>这一原则指的是我们应允许用户方便的扩展我们代码模块的功能，而不需要打开 js 文件源码手动对其进行修改。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// What if we wanted another HTTP Method, like DELETE? We would have to</span></span><br><span class="line">    <span class="comment">// open this file up and modify this and put it in manually.</span></span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS = [<span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'GET'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(url) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS = [<span class="string">'POST'</span>, <span class="string">'PUT'</span>, <span class="string">'GET'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(url) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addHTTPMethod(method) &#123;</span><br><span class="line">    <span class="keyword">this</span>.HTTP_METHODS.push(method);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="利斯科夫替代原则-LSP"><a href="#利斯科夫替代原则-LSP" class="headerlink" title="利斯科夫替代原则 (LSP)"></a>利斯科夫替代原则 (LSP)</h3><p>“子类对象应该能够替换其超类对象被使用”。</p><p>也就是说，如果有一个父类和一个子类，当采用子类替换父类时不应该产生错误的结果。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = height;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    rectangle.setWidth(<span class="number">4</span>);</span><br><span class="line">    rectangle.setHeight(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> area = rectangle.getArea(); <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render(area) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.width * <span class="keyword">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setLength(length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (shape.constructor.name) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Square'</span>:</span><br><span class="line">        shape.setLength(<span class="number">5</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Rectangle'</span>:</span><br><span class="line">        shape.setWidth(<span class="number">4</span>);</span><br><span class="line">        shape.setHeight(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shapes = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>“客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。”</p><p>在 JS 中，当一个类需要许多参数设置才能生成一个对象时，或许大多时候不需要设置这么多的参数。此时减少对配置参数数量的需求是有益的。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMTraverser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(settings) &#123;</span><br><span class="line">    <span class="keyword">this</span>.settings = settings;</span><br><span class="line">    <span class="keyword">this</span>.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.rootNode = <span class="keyword">this</span>.settings.rootNode;</span><br><span class="line">    <span class="keyword">this</span>.animationModule.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverse() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> $ = <span class="keyword">new</span> DOMTraverser(&#123;</span><br><span class="line">  rootNode: <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>),</span><br><span class="line">  animationModule: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// Most of the time, we won't need to animate when traversing.</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMTraverser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(settings) &#123;</span><br><span class="line">    <span class="keyword">this</span>.settings = settings;</span><br><span class="line">    <span class="keyword">this</span>.options = settings.options;</span><br><span class="line">    <span class="keyword">this</span>.setup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.rootNode = <span class="keyword">this</span>.settings.rootNode;</span><br><span class="line">    <span class="keyword">this</span>.setupOptions();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setupOptions() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.animationModule) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverse() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> $ = <span class="keyword">new</span> DOMTraverser(&#123;</span><br><span class="line">  rootNode: <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    animationModule: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>该原则有两个核心点：</p><ol><li>高层模块不应该依赖于低层模块。他们都应该依赖于抽象接口。</li><li>抽象接口应该脱离具体实现，具体实现应该依赖于抽象接口。</li></ol><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryTracker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(items) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">    <span class="comment">// We should just have requestItems depend on a request method: `request`</span></span><br><span class="line">    <span class="keyword">this</span>.requester = <span class="keyword">new</span> InventoryRequester();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItems() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requester.requestItem(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequester</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'HTTP'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inventoryTracker = <span class="keyword">new</span> InventoryTracker([<span class="string">'apples'</span>, <span class="string">'bananas'</span>]);</span><br><span class="line">inventoryTracker.requestItems();</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryTracker</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(items, requester) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = items;</span><br><span class="line">    <span class="keyword">this</span>.requester = requester;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItems() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requester.requestItem(item);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequesterV1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'HTTP'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryRequesterV2</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.REQ_METHODS = [<span class="string">'WS'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestItem(item) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By constructing our dependencies externally and injecting them, we can easily</span></span><br><span class="line"><span class="comment">// substitute our request module for a fancy new one that uses WebSockets.</span></span><br><span class="line"><span class="keyword">let</span> inventoryTracker = <span class="keyword">new</span> InventoryTracker([<span class="string">'apples'</span>, <span class="string">'bananas'</span>], <span class="keyword">new</span> InventoryRequesterV2());</span><br><span class="line">inventoryTracker.requestItems();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用-ES6-的-classes-而不是-ES5-的-Function"><a href="#使用-ES6-的-classes-而不是-ES5-的-Function" class="headerlink" title="使用 ES6 的 classes 而不是 ES5 的 Function"></a>使用 ES6 的 classes 而不是 ES5 的 Function</h3><p>典型的 ES5 的类(function)在继承、构造和方法定义方面可读性较差。</p><p>当需要继承时，优先选用 classes。</p><p>但是，当在需要更大更复杂的对象时，最好优先选择更小的 function 而非 classes。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animal = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Animal)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Animal with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mammal = <span class="function"><span class="keyword">function</span>(<span class="params">age, furColor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Mammal)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Mammal with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal.call(<span class="keyword">this</span>, age);</span><br><span class="line">    <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Mammal.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line">Mammal.prototype.constructor = Mammal;</span><br><span class="line">Mammal.prototype.liveBirth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Human = <span class="function"><span class="keyword">function</span>(<span class="params">age, furColor, languageSpoken</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Human)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Human with `new`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mammal.call(<span class="keyword">this</span>, age, furColor);</span><br><span class="line">    <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Human.prototype = <span class="built_in">Object</span>.create(Mammal.prototype);</span><br><span class="line">Human.prototype.constructor = Human;</span><br><span class="line">Human.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    move() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, furColor) &#123;</span><br><span class="line">        <span class="keyword">super</span>(age);</span><br><span class="line">        <span class="keyword">this</span>.furColor = furColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    liveBirth() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Mammal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(age, furColor, languageSpoken) &#123;</span><br><span class="line">        <span class="keyword">super</span>(age, furColor);</span><br><span class="line">        <span class="keyword">this</span>.languageSpoken = languageSpoken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    speak() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这里我们的理解与《代码整洁之道》的建议有些不同。</p><p>有争论说方法链不够干净且违反了<a href="https://en.wikipedia.org/wiki/Law_of_Demeter" target="_blank" rel="noopener">德米特法则</a>，也许这是对的，但这种方法在 JS 及许多库(如 JQuery)中显得非常实用。</p><p>因此，我认为在 JS 中使用方法链是非常合适的。在 class 的函数中返回 this，能够方便的将类需要执行的多个方法链接起来。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">this</span>.model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'white'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car();</span><br><span class="line">car.setColor(<span class="string">'pink'</span>);</span><br><span class="line">car.setMake(<span class="string">'Ford'</span>);</span><br><span class="line">car.setModel(<span class="string">'F-150'</span>)</span><br><span class="line">car.save();</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">this</span>.model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'white'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMake(make) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setModel(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.make, <span class="keyword">this</span>.model, <span class="keyword">this</span>.color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car = <span class="keyword">new</span> Car()</span><br><span class="line">  .setColor(<span class="string">'pink'</span>)</span><br><span class="line">  .setMake(<span class="string">'Ford'</span>)</span><br><span class="line">  .setModel(<span class="string">'F-150'</span>)</span><br><span class="line">  .save();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="优先使用组合模式而非继承"><a href="#优先使用组合模式而非继承" class="headerlink" title="优先使用组合模式而非继承"></a>优先使用组合模式而非继承</h3><p>在著名的<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener">设计模式</a>一书中提到，应多使用组合模式而非继承。</p><p>这么做有许多优点，在想要使用继承前，多想想能否通过组合模式满足需求吧。</p><p>那么，在什么时候继承具有更大的优势呢？这取决于你的具体需求，但大多情况下，可以遵守以下三点：</p><ol><li>继承关系表现为”是一个”而非”有一个”(如动物-&gt;人 和 用户-&gt;用户细节)</li><li>可以复用基类的代码(“Human”可以看成是”All animal”的一种)</li><li>希望当基类改变时所有派生类都受到影响(如修改”all animals”移动时的卡路里消耗量)</li></ol><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees "have" tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(ssn, salary) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ssn = ssn;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p><a href="http://gotwarlost.github.io/istanbul/" target="_blank" rel="noopener">一些好的覆盖工具</a>。</p><p><a href="http://jstherightway.org/#testing-tools" target="_blank" rel="noopener">一些好的 JS 测试框架</a>。</p><h3 id="单一的测试每个概念"><a href="#单一的测试每个概念" class="headerlink" title="单一的测试每个概念"></a>单一的测试每个概念</h3><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MakeMomentJSGreatAgain'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'handles date boundaries'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">30</span>);</span><br><span class="line">    date.shouldEqual(<span class="string">'1/31/2015'</span>);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'02/29/2016'</span>, date);</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'03/01/2015'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MakeMomentJSGreatAgain'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'handles 30-day months'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'1/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">30</span>);</span><br><span class="line">    date.shouldEqual(<span class="string">'1/31/2015'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles leap year'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2016'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'02/29/2016'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles non-leap year'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> MakeMomentJSGreatAgain(<span class="string">'2/1/2015'</span>);</span><br><span class="line">    date.addDays(<span class="number">28</span>);</span><br><span class="line">    assert.equal(<span class="string">'03/01/2015'</span>, date);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h2><h3 id="用-Promises-替代回调"><a href="#用-Promises-替代回调" class="headerlink" title="用 Promises 替代回调"></a>用 Promises 替代回调</h3><p>回调不够整洁并会造成大量的嵌套。ES6 内嵌了 Promises，使用它吧。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'fs'</span>).writeFile(<span class="string">'article.html'</span>, response.body, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>).writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="Async-Await-是较-Promises-更好的选择"><a href="#Async-Await-是较-Promises-更好的选择" class="headerlink" title="Async/Await 是较 Promises 更好的选择"></a>Async/Await 是较 Promises 更好的选择</h3><p>Promises 是较回调而言更好的一种选择，但 ES7 中的 async 和 await 更胜过 Promises。</p><p>在能使用 ES7 特性的情况下可以尽量使用他们替代 Promises。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'request-promise'</span>).get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>).writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getCleanCodeArticle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> request.get(<span class="string">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>);</span><br><span class="line">    <span class="keyword">var</span> fileHandle = <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">'fs-promise'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> fileHandle.writeFile(<span class="string">'article.html'</span>, response);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File written'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a><strong>错误处理</strong></h2><p>错误抛出是个好东西！这使得你能够成功定位运行状态中的程序产生错误的位置。</p><h3 id="别忘了捕获错误"><a href="#别忘了捕获错误" class="headerlink" title="别忘了捕获错误"></a>别忘了捕获错误</h3><p>对捕获的错误不做任何处理是没有意义的。</p><p>代码中 <code>try/catch</code> 的意味着你认为这里可能出现一些错误，你应该对这些可能的错误存在相应的处理方案。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  notifyUserOfError(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  reportErrorToService(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要忽略被拒绝的-promises"><a href="#不要忽略被拒绝的-promises" class="headerlink" title="不要忽略被拒绝的 promises"></a>不要忽略被拒绝的 promises</h3><p>理由同 <code>try/catch</code>。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getdata()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  functionThatMightThrow(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getdata()</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  functionThatMightThrow(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// One option (more noisy than console.log):</span></span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  notifyUserOfError(error);</span><br><span class="line">  <span class="comment">// Another option:</span></span><br><span class="line">  reportErrorToService(error);</span><br><span class="line">  <span class="comment">// OR do all three!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a><strong>格式化</strong></h2><p>格式化是一件主观的事。如同这里的许多规则一样，这里并没有一定/立刻需要遵守的规则。可以在<a href="http://standardjs.com/rules.html" target="_blank" rel="noopener">这里</a>完成格式的自动化。</p><h3 id="大小写一致"><a href="#大小写一致" class="headerlink" title="大小写一致"></a>大小写一致</h3><p>JS 是弱类型语言，合理的采用大小写可以告诉你关于变量/函数等的许多消息。</p><p>这些规则是主观定义的，团队可以根据喜欢进行选择。重点在于无论选择何种风格，都需要注意保持一致性。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> songs = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">var</span> Artists = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alpaca</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> songs = [<span class="string">'Back In Black'</span>, <span class="string">'Stairway to Heaven'</span>, <span class="string">'Hey Jude'</span>];</span><br><span class="line"><span class="keyword">var</span> artists = [<span class="string">'ACDC'</span>, <span class="string">'Led Zeppelin'</span>, <span class="string">'The Beatles'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alpaca</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="调用函数的函数和被调函数应放在较近的位置"><a href="#调用函数的函数和被调函数应放在较近的位置" class="headerlink" title="调用函数的函数和被调函数应放在较近的位置"></a>调用函数的函数和被调函数应放在较近的位置</h3><p>当函数间存在相互调用的情况时，应将两者置于较近的位置。</p><p>理想情况下，应将调用其他函数的函数写在被调用函数的上方。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(employee) &#123;</span><br><span class="line">    <span class="keyword">this</span>.employee = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupMananger() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">let</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perfReview() &#123;</span><br><span class="line">      getPeerReviews();</span><br><span class="line">      getManagerReview();</span><br><span class="line">      getSelfReview();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">let</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> review = <span class="keyword">new</span> PerformanceReview(user);</span><br><span class="line">review.perfReview();</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(employee) &#123;</span><br><span class="line">    <span class="keyword">this</span>.employee = employee;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  perfReview() &#123;</span><br><span class="line">      getPeerReviews();</span><br><span class="line">      getManagerReview();</span><br><span class="line">      getSelfReview();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getPeerReviews() &#123;</span><br><span class="line">    <span class="keyword">let</span> peers = <span class="keyword">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupPeers() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'peers'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getManagerReview() &#123;</span><br><span class="line">    <span class="keyword">let</span> manager = <span class="keyword">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lookupMananger() &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="keyword">this</span>.employee, <span class="string">'manager'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSelfReview() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.perfReview();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><h3 id="只对存在一定业务逻辑复杂性的代码进行注释"><a href="#只对存在一定业务逻辑复杂性的代码进行注释" class="headerlink" title="只对存在一定业务逻辑复杂性的代码进行注释"></a>只对存在一定业务逻辑复杂性的代码进行注释</h3><p>注释并不是必须的，好的代码是能够让人一目了然，不用过多无谓的注释。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashIt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The hash</span></span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Length of string</span></span><br><span class="line">  <span class="keyword">var</span> length = data.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loop through every character in data</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// Get character code.</span></span><br><span class="line">    <span class="keyword">var</span> char = data.charCodeAt(i);</span><br><span class="line">    <span class="comment">// Make the hash</span></span><br><span class="line">    hash = ((hash &lt;&lt; <span class="number">5</span>) - hash) + char;</span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash = hash &amp; hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashIt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> length = data.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> char = data.charCodeAt(i);</span><br><span class="line">    hash = ((hash &lt;&lt; <span class="number">5</span>) - hash) + char;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert to 32-bit integer</span></span><br><span class="line">    hash = hash &amp; hash;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不要在代码库中遗留被注释掉的代码"><a href="#不要在代码库中遗留被注释掉的代码" class="headerlink" title="不要在代码库中遗留被注释掉的代码"></a>不要在代码库中遗留被注释掉的代码</h3><p>版本控制的存在是有原因的。让旧代码存在于你的 history 里吧。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">doStuff();</span><br><span class="line"><span class="comment">// doOtherStuff();</span></span><br><span class="line"><span class="comment">// doSomeMoreStuff();</span></span><br><span class="line"><span class="comment">// doSoMuchStuff();</span></span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doStuff();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="不需要版本更新类型注释"><a href="#不需要版本更新类型注释" class="headerlink" title="不需要版本更新类型注释"></a>不需要版本更新类型注释</h3><p>记住，我们可以使用版本控制。废代码、被注释的代码及用注释记录代码中的版本更新说明都是没有必要的。</p><p>需要时可以使用 <code>git log</code> 获取历史版本。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn't understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Removed type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Added combine with type-checking (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免位置标记"><a href="#避免位置标记" class="headerlink" title="避免位置标记"></a>避免位置标记</h3><p>这些东西通常只能代码麻烦，采用适当的缩进就可以了。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Scope Model Instantiation</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">let</span> $scope.model = &#123;</span><br><span class="line">  menu: <span class="string">'foo'</span>,</span><br><span class="line">  nav: <span class="string">'bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Action setup</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">let</span> actions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $scope.model = &#123;</span><br><span class="line">  menu: <span class="string">'foo'</span>,</span><br><span class="line">  nav: <span class="string">'bar'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> actions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p><h3 id="避免在源文件中写入法律评论"><a href="#避免在源文件中写入法律评论" class="headerlink" title="避免在源文件中写入法律评论"></a>避免在源文件中写入法律评论</h3><p>将你的 <code>LICENSE</code> 文件置于源码目录树的根目录。</p><p><strong>反例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The MIT License (MIT)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Copyright (c) 2016 Ryan McDermott</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment">of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="comment">in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment">copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment">furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The above copyright notice and this permission notice shall be included in all</span></span><br><span class="line"><span class="comment">copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></span><br><span class="line"><span class="comment">SOFTWARE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateBill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateBill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">回到目录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;转载&lt;br&gt;来自&lt;a href=&quot;https://github.com/alivebao/clean-code-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/p&gt;&lt;/bl
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2019 年大前端技术趋势分析</title>
    <link href="https://nnorland.github.io/2019/08/12/FrontEnd/frontend-tendency-2019/"/>
    <id>https://nnorland.github.io/2019/08/12/FrontEnd/frontend-tendency-2019/</id>
    <published>2019-08-12T02:25:25.000Z</published>
    <updated>2019-08-12T02:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术采用生命周期"><a href="#技术采用生命周期" class="headerlink" title="技术采用生命周期"></a>技术采用生命周期</h2><ul><li>创新者（Innovators）：技术的冒险者，第一时间尝试新技术。</li><li>早期采用者（Early Adopters）：技术早期采用者，具备一定探索精神，某个领域的意见领袖。</li><li>早期大众（early majority）：技术早期大众使用者，深思熟虑者，往往采用相对成熟的技术。</li><li>晚期大众（late majority）：技术的平民老百姓，跟随趋势采用当前主流的技术。</li><li>落后者（laggards）：技术的落后者，长时间不更新技术栈，存在大量技术债。</li></ul><h2 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h2><p>按照大前端技术架构图进行分层，大体分为：状态管理、UI 组件、小程序、跨平台、框架层、编程语言、工程化、监控、测试和服务端。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://oss.liujiaan.top/image/hexo/20190812102831.png" alt=""></div><div class="image-caption"></div></figure><blockquote><p>内容来源 <a href="https://www.infoq.cn/article/uQjaf_dAHm6viAXsuxzI" target="_blank" rel="noopener">https://www.infoq.cn/article/uQjaf_dAHm6viAXsuxzI</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;技术采用生命周期&quot;&gt;&lt;a href=&quot;#技术采用生命周期&quot; class=&quot;headerlink&quot; title=&quot;技术采用生命周期&quot;&gt;&lt;/a&gt;技术采用生命周期&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;创新者（Innovators）：技术的冒险者，第一时间尝试新技术。&lt;/li&gt;&lt;li
      
    
    </summary>
    
    
      <category term="FrontEnd" scheme="https://nnorland.github.io/categories/FrontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>杨辉三角的JavaScript实现</title>
    <link href="https://nnorland.github.io/2019/07/22/Pascal-Triangle/"/>
    <id>https://nnorland.github.io/2019/07/22/Pascal-Triangle/</id>
    <published>2019-07-22T09:16:17.000Z</published>
    <updated>2019-07-22T09:16:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>杨辉三角，是二项式系数在三角形中的一种几何排列，中国南宋数学家杨辉1261年所著的《详解九章算法》一书中出现。 在欧洲，帕斯卡（1623—-1662）在1654年发现这一规律，所以这个表又叫做帕斯卡三角形。 帕斯卡的发现比杨辉要迟393年，比贾宪迟600年。</p></blockquote><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://oss.liujiaan.top/image/hexo/PascalTriangleAnimated2.gif" alt="杨辉三角"></div><div class="image-caption">杨辉三角</div></figure><h2 id="给定一个非负整数-numRows，生成杨辉三角的前-numRows-行。"><a href="#给定一个非负整数-numRows，生成杨辉三角的前-numRows-行。" class="headerlink" title="给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。"></a>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</h2><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">numRows</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generate = <span class="function"><span class="keyword">function</span>(<span class="params">numRows</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numRows; i ++) &#123;</span><br><span class="line">        <span class="keyword">const</span> subArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; j &lt; i) &#123;</span><br><span class="line">                subArr.push(result[i<span class="number">-1</span>][j<span class="number">-1</span>] + result[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                subArr.push(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(subArr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="给定一个非负索引-k，其中-k-≤-33，返回杨辉三角的第-k-行"><a href="#给定一个非负索引-k，其中-k-≤-33，返回杨辉三角的第-k-行" class="headerlink" title="给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行"></a>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行</h2><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: [1,3,3,1]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">rowIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 杨辉三角正好是二次项的展开式,(1+x)的n次幂的系数,有通项公式C(n-1,m-1)=(n-1)!/[(m-1)!(n-m)!] 而研究每一项后,发现他们的规律,如 C(4,1)=C(4,0)*4/1,C(4,2)=C(4,1)*3/2, C(4,3)=C(4,2)*2/3,C(4,4)=C(4,3)*1/4: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span> (<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (rowIndex === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rowIndex === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> result = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rowIndex; i++) &#123;</span><br><span class="line">      index = index * (rowIndex - i) / (i + <span class="number">1</span>);</span><br><span class="line">      result.push(index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('getRow(3)', getRow(5))</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">rowIndex</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getRow = <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span>) <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">if</span> (rowIndex === <span class="number">0</span>) <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">let</span> preRow = getRow(rowIndex - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = []  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= rowIndex; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span> || i === rowIndex) result[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> result[i] = preRow[i - <span class="number">1</span>] + preRow[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;杨辉三角，是二项式系数在三角形中的一种几何排列，中国南宋数学家杨辉1261年所著的《详解九章算法》一书中出现。 在欧洲，帕斯卡（1623—-1662）在1654年发现这一规律，所以这个表又叫做帕斯卡三角形。 帕斯卡的发现比杨辉要迟393年，比贾宪迟6
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://nnorland.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法JavaScript描述</title>
    <link href="https://nnorland.github.io/2019/06/11/JavaScript/the-data-structure/"/>
    <id>https://nnorland.github.io/2019/06/11/JavaScript/the-data-structure/</id>
    <published>2019-06-11T07:22:02.000Z</published>
    <updated>2019-06-11T07:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>有几个操作是将数组作为一个整体进行的。首先，可以将一个数组赋给另外一个数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = nums;</span><br></pre></td></tr></table></figure><p>但是，当把一个数组赋给另外一个数组时，只是为被赋值的数组增加了一个新的引用。当 你通过原引用修改了数组的值，另外一个引用也会感知到这个变化。下面的代码展示了这 种情况:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">  nums[i] = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> samenums = nums;</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">400</span>; print(samenums[<span class="number">0</span>]); <span class="comment">// 显示 400</span></span><br></pre></td></tr></table></figure><p>这种行为被称为浅复制，新数组依然指向原来的数组。一个更好的方案是使用深复制，将 原数组中的每一个元素都复制一份到新数组中。可以写一个深复制函数来做这件事:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function copy(arr1, arr2) &#123;</span><br><span class="line">  for (var i &#x3D; 0; i &lt; arr1.length; ++i) &#123;</span><br><span class="line">      arr2[i] &#x3D; arr1[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于JavaScript的深浅拷贝，可参考<a href="https://www.zhihu.com/question/23031215" target="_blank" rel="noopener">【知乎】javascript中的深拷贝和浅拷贝？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;有几个操作是将数组作为一个整体进行的。首先，可以将一个数组赋给另外一个数组:&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式</title>
    <link href="https://nnorland.github.io/2018/06/20/JavaScript/JavaScript-Design-patterns/"/>
    <id>https://nnorland.github.io/2018/06/20/JavaScript/JavaScript-Design-patterns/</id>
    <published>2018-06-20T11:20:28.000Z</published>
    <updated>2018-06-20T11:20:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式的类别"><a href="#设计模式的类别" class="headerlink" title="设计模式的类别"></a>设计模式的类别</h2><h3 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h3><ul><li>简单工厂模式（Simple Factory）</li><li>工厂方法模式（Factory Method）</li><li>抽象工厂模式（Abstract Factory）</li><li>创建者模式（Builder）</li><li>原型模式（Prototype）</li><li>单例模式（Singleton）</li></ul><h3 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h3><ul><li>外观模式/门面模式（Facade门面模式）</li><li>适配器模式（Adapter）</li><li>代理模式（Proxy）</li><li>装饰模式（Decorator）</li><li>桥梁模式/桥接模式（Bridge）</li><li>组合模式（Composite）</li><li>享元模式（Flyweight）</li></ul><h3 id="行为设计模式"><a href="#行为设计模式" class="headerlink" title="行为设计模式"></a>行为设计模式</h3><ul><li>模板方法模式（Template Method）</li><li>观察者模式（Observer）</li><li>状态模式（State）</li><li>策略模式（Strategy）</li><li>职责链模式（Chain of Responsibility）</li><li>命令模式（Command）</li><li>访问者模式（Visitor）</li><li>调停者模式（Mediator）</li><li>备忘录模式（Memento）</li><li>迭代器模式（Iterator）</li><li>解释器模式（Interpreter）</li></ul><h3 id="三者之间的区别和联系"><a href="#三者之间的区别和联系" class="headerlink" title="三者之间的区别和联系"></a>三者之间的区别和联系</h3><blockquote><p>创建型模式提供生存环境，结构型模式提供生存理由，行为型模式提供如何生存。</p></blockquote><p>创建型模式为其他两种模式使用提供了环境。<br>结构型模式侧重于接口的使用，它做的一切工作都是对象或是类之间的交互，提供一个门。<br>行为型模式顾名思义，侧重于具体行为，所以概念中才会出现职责分配和算法通信等内容。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>开闭原则：对扩展开放，对修改关闭<br>里氏转换原则： 子类继承父类，单独完全可以运行<br>依赖倒转原则： 引用一个对象，如果这个对象有底层类型，直接引用底层类型<br>接口隔离原则： 每一个接口应该是一种角色<br>合成/聚合复用原则： 新的对象应使用一些已有的对象，使之成为新对象的一部分<br>迪米特原则： 一个对象应对其他对象有尽可能少的了解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式的类别&quot;&gt;&lt;a href=&quot;#设计模式的类别&quot; class=&quot;headerlink&quot; title=&quot;设计模式的类别&quot;&gt;&lt;/a&gt;设计模式的类别&lt;/h2&gt;&lt;h3 id=&quot;创建型设计模式&quot;&gt;&lt;a href=&quot;#创建型设计模式&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>PN532 + 树莓派读写NFC</title>
    <link href="https://nnorland.github.io/2017/09/23/%E6%9D%82%E8%AE%B0/nfc-raspberrypi-pn532/"/>
    <id>https://nnorland.github.io/2017/09/23/%E6%9D%82%E8%AE%B0/nfc-raspberrypi-pn532/</id>
    <published>2017-09-23T05:10:43.000Z</published>
    <updated>2017-09-23T05:10:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司门禁丢了要150。卧槽,果断自己做几张,把原版供起来。</p></blockquote><p>首先需要PN532芯片,RC522试了下,只能读卡,不能写卡。<br>树莓派的UART被蓝牙占用,尝试无果。用I2C接口成功。</p><a id="more"></a><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://oss.liujiaan.top/image/hexo/2017/09/640760-20160809011418434-760565530.png" alt="pn532"></div><div class="image-caption">pn532</div></figure><p><a id="libnfc_conf" href="javascript:" name="“libnfc_conf”"></a></p><blockquote><p>参考网站:<br>参考资料附录&amp;相关链接：<br>A1.<a href="http://nfc-tools.org/index.php?title=Libnfc:configuration" target="_blank" rel="noopener">libnfc配置方法</a><br>A2.<a href="http://nfc-tools.org/index.php?title=Libnfc" target="_blank" rel="noopener">libnfc安装教程</a><br>A3.<a href="http://nfc-tools.org/index.php?title=Libnfc:API" target="_blank" rel="noopener">libnfc用户API</a><br>A4.<a href="http://nfc-tools.org/index.php?title=Main_Page" target="_blank" rel="noopener">libnfc主页</a><br>A5.<a href="http://nfc-tools.org/index.php?title=Category:Libnfc:Examples" target="_blank" rel="noopener">libnfc学习例程</a><br>A6.<a href="http://imall.iteadstudio.com/im130625002.html" target="_blank" rel="noopener">Iteadstudio PN532 Module</a><br>A7.<a href="http://learn.adafruit.com/adafruit-nfc-rfid-on-raspberry-pi/freeing-uart-on-the-pi" target="_blank" rel="noopener">Disable R-Pi/RASPBIAN serial console for using UART0</a><br>A8.<a href="http://geek-workshop.com/thread-10042-1-1.html" target="_blank" rel="noopener">http://geek-workshop.com/thread-10042-1-1.html</a></p></blockquote><h1 id="系统搭建"><a href="#系统搭建" class="headerlink" title="系统搭建"></a>系统搭建</h1><p>系统为Respbian</p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>执行sudo raspi-config进行配置.<br>选择Interface Options，启用SPI、I2C，禁用Serial<br>选择Advanced Options，1-Expand Filesystem 扩展分区</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>autoconf、libusb-dev、libtool、libpcsclite-dev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get upgrade  </span><br><span class="line">sudo apt-get install autoconf libusb-dev libtool libpcsclite-dev</span><br></pre></td></tr></table></figure><h1 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h1><h2 id="树莓派与PN532连接"><a href="#树莓派与PN532连接" class="headerlink" title="树莓派与PN532连接"></a>树莓派与PN532连接</h2><p>树莓派3接口图</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://oss.liujiaan.top/image/hexo/2017/09/2016042406444998.jpg" alt="树莓派3GPIO图"></div><div class="image-caption">树莓派3GPIO图</div></figure><p>我用的I2C接口,接线方式如下。</p><blockquote><p>04 &lt;-&gt; VCC<br>06 &lt;-&gt; GND<br>03 &lt;-&gt; SDA<br>05 &lt;-&gt; SCL</p></blockquote><h2 id="libnfc"><a href="#libnfc" class="headerlink" title="libnfc"></a>libnfc</h2><p>顾名思义，nfc库。<br>官方github:<a href="https://github.com/nfc-tools/libnfc" target="_blank" rel="noopener">https://github.com/nfc-tools/libnfc</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/nfc-tools/libnfc/releases/download/libnfc-1.7.1/libnfc-1.7.1.tar.bz2</span><br><span class="line">tar -jxvf libnfc-1.7.1.tar.bz2</span><br><span class="line">cd libnfc-1.7.1</span><br><span class="line">autoreconf -vis</span><br><span class="line">./configure --with-drivers=all --sysconfdir=/etc --prefix=/usr</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo mkdir /etc/nfc</span><br></pre></td></tr></table></figure><p>用I2C方式连接,需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;nfc&#x2F;nfc&#x2F;libnfc.conf</span><br></pre></td></tr></table></figure><p>填写</p><blockquote><p>device.connstring = pn532_i2c:/dev/i2c-1</p></blockquote><p>其他配置项默认,修改参照上面的<a href="#libnfc_conf">libnfc配置</a><br>如果我们使用UART接口直接和PN532在树莓派上连接，则可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp contrib&#x2F;libnfc&#x2F;pn532_uart_on_rpi.conf.sample &#x2F;etc&#x2F;nfc&#x2F;devices.d&#x2F;pn532_uart_on_rpi.conf</span><br></pre></td></tr></table></figure><p>执行<code>nfc-list</code>命令,输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ nfc-list</span><br><span class="line">nfc-list uses libnfc 1.7.1</span><br><span class="line">NFC device: pn532_i2c:/dev/i2c-1 opened</span><br></pre></td></tr></table></figure><h2 id="mfoc"><a href="#mfoc" class="headerlink" title="mfoc"></a>mfoc</h2><p>官方github：<a href="https://github.com/nfc-tools/mfoc" target="_blank" rel="noopener">https://github.com/nfc-tools/mfoc</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nfc-tools/mfoc.git</span><br><span class="line">cd mfoc/</span><br><span class="line">autoreconf -vis</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>mfoc用法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Usage: mfoc [-h] [-k key] [-f file] … [-P probnum] [-T tolerance] [-O output]</span><br><span class="line">h print this help and exit</span><br><span class="line">k try the specified key in addition to the default keys  </span><br><span class="line">//指定key</span><br><span class="line">f parses a file of keys to add in addition to the default keys  </span><br><span class="line">//用文件为输入指定多个key</span><br><span class="line">P number of probes per sector, instead of default of 20  </span><br><span class="line">//每个扇区测试密钥数目</span><br><span class="line">T nonce tolerance half-range, instead of default of 20  </span><br><span class="line">(i.e., 40 for the total range, in both directions)</span><br><span class="line">O file in which the card contents will be written (REQUIRED) </span><br><span class="line">//输出dump的文件</span><br><span class="line">D file in which partial card info will be written in case PRNG is not vulnerable</span><br><span class="line">Example: mfoc -O mycard.mfd</span><br><span class="line">Example: mfoc -k ffffeeeedddd -O mycard.mfd</span><br><span class="line">Example: mfoc -f keys.txt -O mycard.mfd</span><br><span class="line">Example: mfoc -P 50 -T 30 -O mycard.mfd</span><br><span class="line">This is mfoc version 0.10.7.</span><br><span class="line">For more information, run: ‘man mfoc’.</span><br><span class="line">[mfoc -h]</span><br></pre></td></tr></table></figure><h2 id="mfcuk"><a href="#mfcuk" class="headerlink" title="mfcuk"></a>mfcuk</h2><p>官方github:<a href="https://github.com/nfc-tools/mfcuk" target="_blank" rel="noopener">https://github.com/nfc-tools/mfcuk</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nfc-tools/mfcuk.git</span><br><span class="line">cd mfcuk</span><br><span class="line">autoreconf -vis</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>用法,执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mfcuk</span><br></pre></td></tr></table></figure><h2 id="写卡"><a href="#写卡" class="headerlink" title="写卡"></a>写卡</h2><p>直接使用nfc-mfclassic即可对Mifare classic系列卡片写入。主要有M1卡（S50）和4K卡（S70）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nfc-mfclassic</span><br></pre></td></tr></table></figure><h2 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h2><p>mfoc是用来破解IC卡密钥的，一般的门禁卡很可能用的是默认密钥，破解起来很快。<br>把要复制的卡放到读卡器上，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mfoc -O target.dmp</span><br></pre></td></tr></table></figure><p>如果不成功，说明加密没有用默认秘钥，可以增加每个区块的爆破次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mfoc -P 500 -O target.dmp</span><br></pre></td></tr></table></figure><p>如果顺利你会看到所有block的信息都被dump出来。M1卡有16个sector，每个sector有4个block，所以一共是64个block。<br>然后把一张新卡放上读卡器，也dump一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mfoc -O blank.dmp</span><br></pre></td></tr></table></figure><p>接下来就可以写卡了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nfc-mfclassic W B target.dmp blank.dmp</span><br></pre></td></tr></table></figure><p>写完之后可以把新卡再dump出来，与原始卡比较一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mfoc -O new.dmp</span><br><span class="line">hexdump -vC target.dmp &gt; target.hex</span><br><span class="line">hexdump -vC new.dmp &gt; new.hex</span><br><span class="line">diff target.hex new.hex</span><br></pre></td></tr></table></figure><p>如果diff没有显示任何结果，恭喜，卡片已经100%复制成功，甚至不用去刷卡验证就知道可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;公司门禁丢了要150。卧槽,果断自己做几张,把原版供起来。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;首先需要PN532芯片,RC522试了下,只能读卡,不能写卡。&lt;br&gt;树莓派的UART被蓝牙占用,尝试无果。用I2C接口成功。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂记" scheme="https://nnorland.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="raspberrypi" scheme="https://nnorland.github.io/tags/raspberrypi/"/>
    
      <category term="nfc" scheme="https://nnorland.github.io/tags/nfc/"/>
    
  </entry>
  
  <entry>
    <title>ios禁用非交互的audio.play()方法</title>
    <link href="https://nnorland.github.io/2017/01/04/JavaScript/ios-audio-play/"/>
    <id>https://nnorland.github.io/2017/01/04/JavaScript/ios-audio-play/</id>
    <published>2017-01-04T07:30:52.000Z</published>
    <updated>2017-01-04T07:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考文献<br><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html" target="_blank" rel="noopener">apple开发者中心</a><br>谷歌有关audio的说明:<a href="https://developers.google.com/web/updates/2016/03/play-returns-promise" target="_blank" rel="noopener">User Control of Downloads Over Cellular Networks</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In Safari on iOS (for all devices, including iPad), where the user may be on a cellular network and be charged per data unit, preload and autoplay are disabled. No data is loaded until the user initiates it. This means the JavaScript play() and load() methods are also inactive until the user initiates playback, unless the play() or load() method is triggered by user action. In other words, a user-initiated Play button works, but an onLoad&#x3D;&quot;play()&quot; event does not.  </span><br><span class="line"></span><br><span class="line">This plays the movie: &#96;&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Play&quot; onclick&#x3D;&quot;document.myMovie.play()&quot;&gt;&#96;  </span><br><span class="line"></span><br><span class="line">This does nothing on iOS: &#96;&lt;body onload&#x3D;&quot;document.myMovie.play()&quot;&gt;&#96;</span><br></pre></td></tr></table></figure><p>用我学了长达12年的英语翻译一下“就是不可以啦，需要用户主动去触发才行的啦”。好了，我能做的就是这么多了，其实我还手动测试了一下其他hack方法，最后也以失败告终，直接解决办法就是绑定一个触摸事件给最上层容器上，用户肯定要触摸滚动之类的啊，这样不得不就触发了。<br>最近遇到语音连续播放的问题,iOS禁用了非交互的audio.play()方法,之前采用的方法,模拟点击,各种hack,都没有效果.无奈放弃<br>找到一种,动态src的方式来操作.事例代码如下.<br>有待填坑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [</span><br><span class="line">        <span class="string">"http://aliyun.mochi.shufawu.com/weixin-course/201611251845/207631360020730506.mp3"</span>,</span><br><span class="line">        <span class="string">"http://aliyun.mochi.shufawu.com/weixin-course/201611251845/4479743430150737799.mp3"</span>,</span><br><span class="line">        <span class="string">"http://aliyun.mochi.shufawu.com/weixin-course/201611241843/7952956551407820401.mp3"</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> myAudio = <span class="keyword">new</span> Audio();</span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iphone|ipad|ipod/</span>.test(ua)) &#123;</span><br><span class="line">        alert(<span class="string">"iphone"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'other'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    myAudio.preload = <span class="literal">true</span>;</span><br><span class="line">    myAudio.controls = <span class="literal">true</span>;</span><br><span class="line">    myAudio.src = arr.reverse().pop();</span><br><span class="line">    myAudio.addEventListener(<span class="string">'ended'</span>, playEndedHandler, <span class="literal">false</span>);</span><br><span class="line">    myAudio.play();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"audioBox"</span>).appendChild(myAudio);</span><br><span class="line">    myAudio.loop = <span class="literal">false</span>;</span><br><span class="line">    myAudio.controls = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">playEndedHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        myAudio.src = arr.reverse().pop();</span><br><span class="line">        myAudio.play();</span><br><span class="line">        !arr.length &amp;&amp; myAudio.removeEventListener(<span class="string">'ended'</span>, playEndedHandler, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startPlayback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'#music'</span>).play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChromeSamples.log(<span class="string">'Attempting to play automatically...'</span>);</span><br><span class="line"></span><br><span class="line">startPlayback().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ChromeSamples.log(<span class="string">'The play() Promise fulfilled! Rock on!'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  ChromeSamples.log(<span class="string">'The play() Promise rejected!'</span>);</span><br><span class="line">  ChromeSamples.log(<span class="string">'Use the Play button instead.'</span>);</span><br><span class="line">  ChromeSamples.log(error);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> playButton = <span class="built_in">document</span>.querySelector(<span class="string">'#play'</span>);</span><br><span class="line">  <span class="comment">// The user interaction requirement is met if</span></span><br><span class="line">  <span class="comment">// playback is triggered via a click event.</span></span><br><span class="line">  playButton.addEventListener(<span class="string">'click'</span>, startPlayback);</span><br><span class="line">  playButton.hidden = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;参考文献&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Devi
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
      <category term="IOS" scheme="https://nnorland.github.io/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>css3混合模式</title>
    <link href="https://nnorland.github.io/2016/11/30/FrontEnd/css3-mix-blend-mode/"/>
    <id>https://nnorland.github.io/2016/11/30/FrontEnd/css3-mix-blend-mode/</id>
    <published>2016-11-30T03:52:56.000Z</published>
    <updated>2016-11-30T03:52:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作中,遇到这样一个问题:<br>我们<code>可爱</code>的设计师问我,能不能实现下面这个图的效果</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://ww4.sinaimg.cn/large/006y8lVagw1fa9zv8wcbij30lo0iojts.jpg" alt=""></div><div class="image-caption"></div></figure><p>右边上面的二维码是从微信保存下来的二维码,左边是预期实现的效果,这里,图片采用了一中PS的混合模式:正片叠底。<br>我看到的第一反应:我靠,这图片是白底的,让图片改变背景色?<br>虽然出于前端和设计师之间的深厚友谊,本不应该在没有百度的情况下说没有办法实现的,但这个情况下我还是当机立断:这咋弄,没法实现。<br>不过,遇到问题习惯性的问问百度,我就百度了一下,设计师所说的<code>正片叠底</code>。<br>百度出的结果大跌眼镜,CSS还真的有这个属性。<br>这就是CSS的<a href="https://www.w3.org/TR/compositing-1/#mix-blend-mode" target="_blank" rel="noopener">mix-blend-mode</a>(混合模式)属性。这个属性的作用就是让元素内容和这个元素的背景以及下面的元素发生“混合”。<br>其支持的值还很多:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mix-blend-mode: normal;          &#x2F;&#x2F;正常</span><br><span class="line">mix-blend-mode: multiply;        &#x2F;&#x2F;正片叠底</span><br><span class="line">mix-blend-mode: screen;          &#x2F;&#x2F;滤色</span><br><span class="line">mix-blend-mode: overlay;         &#x2F;&#x2F;叠加</span><br><span class="line">mix-blend-mode: darken;          &#x2F;&#x2F;变暗</span><br><span class="line">mix-blend-mode: lighten;         &#x2F;&#x2F;变亮</span><br><span class="line">mix-blend-mode: color-dodge;     &#x2F;&#x2F;颜色减淡</span><br><span class="line">mix-blend-mode: color-burn;      &#x2F;&#x2F;颜色加深</span><br><span class="line">mix-blend-mode: hard-light;      &#x2F;&#x2F;强光</span><br><span class="line">mix-blend-mode: soft-light;      &#x2F;&#x2F;柔光</span><br><span class="line">mix-blend-mode: difference;      &#x2F;&#x2F;差值</span><br><span class="line">mix-blend-mode: exclusion;       &#x2F;&#x2F;排除</span><br><span class="line">mix-blend-mode: hue;             &#x2F;&#x2F;色相</span><br><span class="line">mix-blend-mode: saturation;      &#x2F;&#x2F;饱和度</span><br><span class="line">mix-blend-mode: color;           &#x2F;&#x2F;颜色</span><br><span class="line">mix-blend-mode: luminosity;      &#x2F;&#x2F;亮度</span><br><span class="line"></span><br><span class="line">mix-blend-mode: initial;         &#x2F;&#x2F;初始</span><br><span class="line">mix-blend-mode: inherit;         &#x2F;&#x2F;继承</span><br><span class="line">mix-blend-mode: unset;           &#x2F;&#x2F;复原</span><br></pre></td></tr></table></figure><p>EXAMPLE<br>Given the following sample markup:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"ducky.png"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And the following style rule:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background-color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>… will produce the following result:</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://ww4.sinaimg.cn/large/006y8lVagw1fab9ycfoduj30a00b074n.jpg" alt=""></div><div class="image-caption"></div></figure><p>If we change the style rule to include blending:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background-color</span>: green; &#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">mix-blend-mode</span>: multiply; &#125;</span><br></pre></td></tr></table></figure><p>… the output will be the image blending with the green background of the</p><body>element.<br><img src="https://ww4.sinaimg.cn/large/006y8lVagw1fab9zd6d0hj30a10b10t1.jpg" alt=""><br>不过目前兼容性还一般,万恶的IE全家,截止到写这篇文章的时候,兼容性是这样的<p></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://ww1.sinaimg.cn/large/006y8lVagw1faqbok44iqj30z70g2q5u.jpg" alt=""></div><div class="image-caption"></div></figure><p class="ciu_embed" data-feature="css-mixblendmode" data-periods="future_1,current,past_1,past_2"><a href="http://caniuse.com/#feat=css-mixblendmode" target="_blank" rel="noopener">Can I Use css-mixblendmode?</a> Data on support for the css-mixblendmode feature across the major browsers from caniuse.com.</p><p>一片飘红有没有?包括edge。看来还是谨慎使用吧。</p><script src="//cdn.jsdelivr.net/caniuse-embed/1.0.1/caniuse-embed.min.js"></script></body>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中,遇到这样一个问题:&lt;br&gt;我们&lt;code&gt;可爱&lt;/code&gt;的设计师问我,能不能实现下面这个图的效果&lt;/p&gt;&lt;figure class=&quot;image-bubble&quot;&gt;&lt;div class=&quot;img-lightbox&quot;&gt;&lt;div class=&quot;overlay&quot;&gt;&lt;/d
      
    
    </summary>
    
    
      <category term="FrontEnd" scheme="https://nnorland.github.io/categories/FrontEnd/"/>
    
    
      <category term="CSS" scheme="https://nnorland.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript函数参数</title>
    <link href="https://nnorland.github.io/2016/11/25/JavaScript/ECMAScript-function-arguments/"/>
    <id>https://nnorland.github.io/2016/11/25/JavaScript/ECMAScript-function-arguments/</id>
    <published>2016-11-25T09:23:50.000Z</published>
    <updated>2016-11-25T09:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript函数的参数与大多数其他语言中函数的参数有所不同。<br>ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。<br>ECMAScript中的参数在内部是用一个数组来表示的。<br>函数接收到的始终都是这个数组，而不关心数组中包含哪些参数（如果有参数的话）。<br>在函数体内可以通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。</p><p>其实，arguments对象只是与数组类似（它并不是Array的实例），因为可以使用方括号语法访问它的每一个元素（即第一个元素是arguments[0]，第二个元素是argumetns[1]，以此类推），使用length属性来确定传递进来多少个参数。</p><p>不显式地使用命名参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello "</span> + <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="string">","</span> + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript函数的一个重要特点：命名的参数只提供便利，但不是必需的。<br>另外，在命名参数方面，其他语言可能需要事先创建一个函数签名，而将来的调用必须与该签名一致。<br>但在ECMAScript中，没有这些条条框框，解析器不会验证命名参数。</p><p>通过访问arguments对象的length属性可以获知有多少个参数传递给了函数。<br>下面这个函数会在每次被调用时，输出传入其中的参数个数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">howManyArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">howManyArgs(<span class="string">"string"</span>, <span class="number">45</span>);  <span class="comment">//2</span></span><br><span class="line">howManyArgs();              <span class="comment">//0</span></span><br><span class="line">howManyArgs(<span class="number">12</span>);            <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>执行以上代码会依次出现3个警告框，分别显示2、0和1。<br>由此可见，开发人员可以利用这一点让函数能够接收任意个参数并分别实现适当的功能。请看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">        alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">        alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doAdd(<span class="number">10</span>);         <span class="comment">//20</span></span><br><span class="line">doAdd(<span class="number">30</span>, <span class="number">20</span>);     <span class="comment">//50</span></span><br></pre></td></tr></table></figure><p>函数doAdd()会在只有一个参数的情况下给该参数加上10；如果是两个参数，则将那个参数简单相加并返回结果。<br>因此，doAdd(10)会返回20，而doAdd(30,20)则返回50。<br>虽然这个特性算不上完美的重载，但也足够弥补ECMAScript的这一缺憾了。</p><blockquote><p>由于不存在函数签名的特性，ECMAScript函数不能重载</p></blockquote><p>另一个与参数相关的重要方面，就是arguments对象可以与命名参数一起使用，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">       alert(num1 + <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">        alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在重写后的这个doAdd()函数中，两个命名参数都与arguments对象一起使用。由于num1的值与arguments[0]的值相同，因此它们可以互换使用（当然，num2和arguments[1]也是如此）。</p><p>关于arguments的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">1</span>] = <span class="number">10</span>;    </span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次执行这个doAdd()函数都会重写第二个参数，将第二个参数的值修改为10。<br>因为arguments对象中的值会自动反映到对应的命名参数，所以修改arguments[1]，也就修改了num2，结果它们的值都会变成10。<br>不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。<br>但这种影响是单向的：修改命名参数不会改变arguments中对应的值。<br>另外还要记住，如果只传入了一个参数，那么为arguments[1]设置的值不会反应到命名参数中。<br>这是因为arguments对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。</p><p>关于参数还要记住最后一点：没有传递值的命名参数将自动被赋予undefined值。<br>这就跟定义了变量但又没有初始化一样。<br>例如，如果只给doAdd()函数传递了一个参数，则num2中就会保存undefined值。</p><p>严格模式对如何使用argumetns对象做出了一些限制。<br>首先，像前面例子中那样的赋值会变得无效。<br>也就是说，即使把arguments[1]设置为10，num2的值仍然还是undefined。<br>其次，重写arguments的值会导致语法错误（代码将不会执行）。</p><blockquote><p>ECMAScript中的所有参数传递的都是值，不可能通过引用传递参数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript函数的参数与大多数其他语言中函数的参数有所不同。&lt;br&gt;ECMAScript函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。&lt;br&gt;ECMAScript中的参数在内部是用一个数组来表示的。&lt;br&gt;函数接收到的始终都是这个数组，而不关心数组
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS揭秘读书笔记</title>
    <link href="https://nnorland.github.io/2016/11/22/FrontEnd/css-secrets/"/>
    <id>https://nnorland.github.io/2016/11/22/FrontEnd/css-secrets/</id>
    <published>2016-11-22T08:38:56.000Z</published>
    <updated>2016-11-22T08:38:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>一项规范如果要推进到最终阶段，其中的每项特 性都必须具备两个独立的实现和全面的测试。</p></blockquote><p>原先的那种方式已经玩不转 了。<br>因此，WC3决定跨出一步，将 CSS 打散到多个不同的规范(模块)中，<br>每个模块都可以独立更新版本。<br>这其中，那些延续CSS 2.1已有特性的模块 会升级到 3 这个版本号。<br>比如:<br>CSS 语法(<a href="http://w3.org/TR/css-syntax-3" target="_blank" rel="noopener">http://w3.org/TR/css-syntax-3</a>)<br>CSS 层叠与继承(<a href="http://w3.org/TR/css-cascade-3" target="_blank" rel="noopener">http://w3.org/TR/css-cascade-3</a>)<br>CSS 颜色(<a href="http://w3.org/TR/css3-color" target="_blank" rel="noopener">http://w3.org/TR/css3-color</a>)<br>选择符(<a href="http://w3.org/TR/selectors" target="_blank" rel="noopener">http://w3.org/TR/selectors</a>)<br>CSS 背景与边框(<a href="http://w3.org/TR/css3-background" target="_blank" rel="noopener">http://w3.org/TR/css3-background</a>)<br>CSS 值与单位(<a href="http://w3.org/TR/css-values-3" target="_blank" rel="noopener">http://w3.org/TR/css-values-3</a>)<br>CSS 文本排版(<a href="http://w3.org/TR/css-text-3" target="_blank" rel="noopener">http://w3.org/TR/css-text-3</a>)<br>CSS 文本装饰效果(<a href="http://w3.org/TR/css-text-decor-3" target="_blank" rel="noopener">http://w3.org/TR/css-text-decor-3</a>)<br>CSS 字体(<a href="http://w3.org/TR/css3-fonts" target="_blank" rel="noopener">http://w3.org/TR/css3-fonts</a>)<br>CSS 基本 UI 特性(<a href="http://w3.org/TR/css3-ui" target="_blank" rel="noopener">http://w3.org/TR/css3-ui</a>)<br>如果某个模块是前所未有的新概念，那它的版本号将从 1 开始。 比如下面这些:<br>CSS 变形(<a href="http://w3.org/TR/css-transforms-1" target="_blank" rel="noopener">http://w3.org/TR/css-transforms-1</a>)<br>图像混合效果(<a href="http://w3.org/TR/compositing-1" target="_blank" rel="noopener">http://w3.org/TR/compositing-1</a>)<br>滤镜效果(<a href="http://w3.org/TR/filter-effects-1" target="_blank" rel="noopener">http://w3.org/TR/filter-effects-1</a>)<br>CSS 遮罩(<a href="http://w3.org/TR/css-masking-1" target="_blank" rel="noopener">http://w3.org/TR/css-masking-1</a>)<br>CSS 伸缩盒布局(<a href="http://w3.org/TR/css-flexbox-1" target="_blank" rel="noopener">http://w3.org/TR/css-flexbox-1</a>)<br>CSS 网格布局(<a href="http://w3.org/TR/css-grid-1" target="_blank" rel="noopener">http://w3.org/TR/css-grid-1</a>)</p><p>尽管“CSS3”这个名词非常流行，但它实际上并没有在任何规范中定义过。<br>真正的情况是，绝大多编辑在提到这个词时，指的是一个非正式的集合，它包括 CSS 规范第三 版(Level 3)再加上一些版本号还是1的新规范。<br>现在CSS有很多实验性特性,而且部分特性已经正式发布使用.</p><p>作为一名初级前端工程师,写页面-模板工程师职责-还是目前的主要本职工作,所以最近读了一本关于CSS的书籍.<br>作为一门大热的编程语言,市面上新出版的关于JavaScript的书很多,但是,关于CSS的新书几乎没有,基本都是好几年前的,<br>加上工作中经常发现没有用过,但很巧妙的CSS语法,感觉有必要再认真学一下关于CSS的知识了.<br>这本书就在这时候出现了.从<a href="https://github.com/cssmagic/blog/issues" target="_blank" rel="noopener">CSS魔法</a>的博客得知,<br>魔法哥刚好翻译完了一本新的CSS书籍,便找来读了读.读起来感觉很有意思.</p><h1 id="读书笔记和内容记录"><a href="#读书笔记和内容记录" class="headerlink" title="读书笔记和内容记录"></a>读书笔记和内容记录</h1><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><h3 id="1-合理简写"><a href="#1-合理简写" class="headerlink" title="1. 合理简写"></a>1. 合理简写</h3><p>有时候，代码易维护和代码量少不可兼得。<br>来看看下面的代码片断，我们要为一个元素添加一道10px 宽的边框，但左侧不加边框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-width: 10px 10px 10px 0;</span><br></pre></td></tr></table></figure><p>只要这一条声明就可以搞定了，但如果日后要改动边框的宽度，你需要 同时改三个地方。如果把它拆成两条声明的话，改起来就容易多了，而且可 读性或许更好一些:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border-width: 10px; </span><br><span class="line">border-left-width: 0;</span><br></pre></td></tr></table></figure><p>又比如,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background: url(tr.png) no-repeat top right &#x2F; 2em 2em, </span><br><span class="line">            url(br.png) no-repeat bottom right &#x2F; 2em 2em,</span><br><span class="line">            url(bl.png) no-repeat bottom left &#x2F; 2em 2em;</span><br></pre></td></tr></table></figure><p>请注意 background-size 和 background-repeat 的值被重复了三遍，<br>尽管每层背景的这两个值确实是相同的。<br>其实我们可以从 CSS 的“<code>列表扩散规则</code>”那里得到好处。<br>它的意思是说，<code>如果只为某个属性提供一个值，那 它就会扩散并应用到列表中的每一项。</code><br>因此，我们可以把这些重复的值从简写属性中抽出来写成一个展开式属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background: url(tr.png) top right,</span><br><span class="line">            url(br.png) bottom right,</span><br><span class="line">            url(bl.png) bottom left; </span><br><span class="line">background-size: 2em 2em;</span><br><span class="line">background-repeat: no-repeat;</span><br></pre></td></tr></table></figure><h3 id="2-currentColor"><a href="#2-currentColor" class="headerlink" title="2. currentColor"></a>2. currentColor</h3><p>在 CSS 颜色(第三版)(<a href="http://w3.org/TR/css3-color)规范中增加了一个特殊的颜色关键字" target="_blank" rel="noopener">http://w3.org/TR/css3-color)规范中增加了一个特殊的颜色关键字</a> currentColor，它是从 SVG 那里借鉴来的。<br>这个关键字并没有绑定到一个固定的颜色值，而是一直被解析为 color。<br>实际上，这个特性让它成为了 CSS 中有史以来的第一个变量。</p><h3 id="3-视觉错觉"><a href="#3-视觉错觉" class="headerlink" title="3. 视觉错觉"></a>3. 视觉错觉</h3><p>字母的形状在两端都比较整齐，而顶部和底部则往往参差不齐，<br>从而导致你的眼睛把这些参差不齐的空缺部分感知为多出来的内边距。<br>因此，如果我们希望四边的内边距看起来是基本一致的，就需要减少顶部和底部的内边距。<br>如下图,图一 边距均相等,图二并不相等,但是图二在视觉上才是相等的。</p><div style="text-align:center"><image style="display:block;margin:auto" src="https://ww4.sinaimg.cn/large/65e4f1e6gw1fa1v1ekvndj209m092wek.jpg">【图1】</div><div style="text-align:center"><image style="display:block;margin:auto" src="https://ww4.sinaimg.cn/large/006tNc79jw1fa11yztc6fj304p037746.jpg">【图2】</div><h2 id="背景与边框"><a href="#背景与边框" class="headerlink" title="背景与边框"></a>背景与边框</h2><h3 id="1-多重边框"><a href="#1-多重边框" class="headerlink" title="1.多重边框"></a>1.多重边框</h3><ul><li>box-shadow 方案</li></ul><p>box-shadow 的好处在于，它支持逗号分隔语法，我们 可以创建任意数量的投影。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background: yellowgreen; box-shadow: 0 0 0 10px #655,</span><br><span class="line">            0 0 0 15px deeppink,</span><br><span class="line">            0 2px 5px 15px rgba(0,0,0,.6);</span><br></pre></td></tr></table></figure><p>效果如图:<br><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1fa1vgeqy20j20am07iq34.jpg" alt=""></p><blockquote><p>需要注意的是，box-shadow 是层层叠加的，第一层投影位于最顶 层，依次类推。因此，你需要按此规律调整扩张半径</p></blockquote><ul><li>outline 方案</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background: yellowgreen; </span><br><span class="line">border: 10px solid #655; </span><br><span class="line">outline: 5px solid deeppink;</span><br></pre></td></tr></table></figure><p>描边的另一个好处在于，你可以通过 outline-offset 属性来控制它跟元素边缘之间的间距，<br>这个属性甚至可以接受负值。这对于某些效果来说非常有用。<br>举个例子，下图就实现了简单的缝边效果。<br><img src="https://ww4.sinaimg.cn/large/65e4f1e6gw1fa1visqdajj209q068weh.jpg" alt=""></p><blockquote><ul><li>只适合两层边框</li><li>边框不一定会贴合 border-radius 属性产生的圆角，因此如果元素是圆角的，它的描边可能还是直角的。<br><code>请注意，这种行 为被 CSS 工作组认为是一个 bug，因此未来可能会改为贴合 border- radius 圆角。</code></li><li>CSS规范中,<code>描边可以不是矩形</code>,使用此方案最好做好不同浏览器的测试。</li></ul></blockquote><h3 id="2-calc-方案"><a href="#2-calc-方案" class="headerlink" title="2. calc() 方案"></a>2. calc() 方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-position: calc(100% - 20px) calc(100% - 10px);</span><br></pre></td></tr></table></figure><h3 id="3-边框内圆角"><a href="#3-边框内圆角" class="headerlink" title="3.边框内圆角"></a>3.边框内圆角</h3><p>上面说过,使用outline绘制双重边框,圆角元素可能描边还是直角。<br>解决办法</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background: tan; border-radius: .8em; </span><br><span class="line">padding: 1em;</span><br><span class="line">box-shadow: 0 0 0 .6em #655; </span><br><span class="line">outline: .6em solid #655;</span><br></pre></td></tr></table></figure><code>box-shadow</code> + <code>outline</code>,两者叠加。<br>实现效果如图<br><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1fa1vuf4iv8j209u03m3ym.jpg" alt=""><br>但是这样,描边是直角,但是box-shadow实际上是圆角的,我们需要调整outline的扩张半径,刚好填充圆角空隙。<br>此处用到勾股定理(小学知识还能用上)。<br>如图</li></ol><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1fa1vxvpojlj209w062aa4.jpg" alt=""></p><p>为了让这个效果得以达成，扩张半径需要比描边的宽度值小，但它同时又要比 ( 2 −1)r 大</p><ul><li>注意:如果描边的宽度比 ( 2 −1)r 小， 那我们是不可能用这个方法达成该效果的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;一项规范如果要推进到最终阶段，其中的每项特 性都必须具备两个独立的实现和全面的测试。&lt;/p&gt;&lt;/blockquote
      
    
    </summary>
    
    
      <category term="FrontEnd" scheme="https://nnorland.github.io/categories/FrontEnd/"/>
    
    
      <category term="CSS" scheme="https://nnorland.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>几个优秀的图片占位网站</title>
    <link href="https://nnorland.github.io/2016/11/18/FrontEnd/image-placeholder/"/>
    <id>https://nnorland.github.io/2016/11/18/FrontEnd/image-placeholder/</id>
    <published>2016-11-18T10:02:42.000Z</published>
    <updated>2023-01-15T02:37:22.878Z</updated>
    
    <content type="html"><![CDATA[<p>在开发网站时，通常需要填充一些图片来预览页面效果，如果没有合适的素材，这时我们就需要占位图片，<br>通过 URL 定制形如 sitename.com/width/height 的地址就可以得到一个随机的占位图片。<br>下面就来细数10个优秀的占位图片生成网站。</p><h1 id="Placehold-it"><a href="#Placehold-it" class="headerlink" title="Placehold.it"></a><a href="http://placehold.it" target="_blank" rel="noopener">Placehold.it</a></h1><p>A quick and simple image placeholder service.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/350x200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/300/09f/fff.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://placehold.it/300&amp;text=placehold.it+rocks!"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://placehold.it/350x200" alt=""></div><div class="image-caption"></div></figure><p>可定制：图片格式、背景颜色、文本、文本颜色、图像尺寸</p><h1 id="lorempixel"><a href="#lorempixel" class="headerlink" title="lorempixel"></a><a href="http://lorempixel.com/" target="_blank" rel="noopener">lorempixel</a></h1><p>Placeholder Images for every case.<br>Webdesign or Print. Just put a custom url in your html and you receive a proper placeholder picture</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://lorempixel.com/400/200to get a random picture of 400 x 200 pixels</span><br><span class="line">http://lorempixel.com/g/400/200to get a random gray picture of 400 x 200 pixels</span><br><span class="line">http://lorempixel.com/400/200/sportsto get a random picture of the sports category</span><br><span class="line">http://lorempixel.com/400/200/sports/1to get picture no. 1/10 from the sports category</span><br><span class="line">http://lorempixel.com/400/200/sports/Dummy-Text...with a custom text on the random Picture</span><br><span class="line">http://lorempixel.com/400/200/sports/1/Dummy-Text...with a custom text on the selected Picture</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://lorempixel.com/350/200/sports" alt=""></div><div class="image-caption"></div></figure><p>可定制：图像分类、文本、图像尺寸、灰度图片</p><h1 id="Fake-images-please"><a href="#Fake-images-please" class="headerlink" title="Fake images please?"></a><a href="http://fakeimg.pl" target="_blank" rel="noopener">Fake images please?</a></h1><p>You just have to put your image size after our URL.<br>Only the first parameter is mandatory. There are options too,<br>you can pass a text, or change some colors.<br>Colors must be hexadecimal,<br>the first one is the background color.<br>You can add the alpha value of the color with a comma, (hex,a).<br>The text can be passed with the text GET variable.<br>Here are some examples you can look at:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/300/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/250x100/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/250x100/ff0000/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/ff0000/000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/ff0000,128/000,255"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=Hello"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://fakeimg.pl/350x200/?text=World&amp;font=lobster"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://fakeimg.pl/350x200/?text=World&font=lobster" alt=""></div><div class="image-caption"></div></figure><p>可定制：背景颜色、文本、文本颜色、图像尺寸、文本字体</p><h1 id="placekitten"><a href="#placekitten" class="headerlink" title="{placekitten}"></a><a href="http://placekitten.com" target="_blank" rel="noopener">{placekitten}</a></h1><p>A quick and simple service for getting pictures of<br>kittens for use as placeholders in your designs or code.<br>Just put your image size (width &amp; height) after our URL<br>and you’ll get a placeholder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Like this: http:&#x2F;&#x2F;placekitten.com&#x2F;200&#x2F;300</span><br><span class="line">or: http:&#x2F;&#x2F;placekitten.com&#x2F;g&#x2F;200&#x2F;300</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">![](http:&#x2F;&#x2F;placekitten.com&#x2F;g&#x2F;200&#x2F;300)  </span><br><span class="line"></span><br><span class="line">可定制：图像尺寸、灰度图片</span><br><span class="line"></span><br><span class="line"># [hhhhold!](http:&#x2F;&#x2F;hhhhold.com)</span><br><span class="line">Never understimate the insanity of user-generated </span><br><span class="line">content in your projects again.</span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;hhhhold.com&#x2F;350x200&quot; &#x2F;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;hhhhold.com&#x2F;m&#x2F;w&#x2F;b&quot; &#x2F;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;hhhold.com&#x2F;350x200&#x2F;png&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://hhhold.com/350x200/png" alt=""></div><div class="image-caption"></div></figure><p>可定制：图像尺寸、随机尺寸、图片格式</p><p>还有 The Random Image Generator,占位图 等等</p><p>参考: <a href="http://www.uedsc.com/the-top-10-placeholder-image-services.html" target="_blank" rel="noopener">http://www.uedsc.com/the-top-10-placeholder-image-services.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发网站时，通常需要填充一些图片来预览页面效果，如果没有合适的素材，这时我们就需要占位图片，&lt;br&gt;通过 URL 定制形如 sitename.com/width/height 的地址就可以得到一个随机的占位图片。&lt;br&gt;下面就来细数10个优秀的占位图片生成网站。&lt;/p&gt;&lt;
      
    
    </summary>
    
    
      <category term="FrontEnd" scheme="https://nnorland.github.io/categories/FrontEnd/"/>
    
    
      <category term="html" scheme="https://nnorland.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>各种定律</title>
    <link href="https://nnorland.github.io/2016/10/31/all-kinds-of-laws/"/>
    <id>https://nnorland.github.io/2016/10/31/all-kinds-of-laws/</id>
    <published>2016-10-31T05:41:32.000Z</published>
    <updated>2023-01-15T02:37:22.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各种定律"><a href="#各种定律" class="headerlink" title="各种定律"></a>各种定律</h1><blockquote><p>包括计算机领域,心理学等,都有很多很有意思的定律,这是遇到的一些定律,这里做一个记录</p></blockquote><h2 id="墨菲定律"><a href="#墨菲定律" class="headerlink" title="墨菲定律"></a><a href="http://baike.baidu.com/view/40544.htm" target="_blank" rel="noopener">墨菲定律</a></h2><p>“墨菲定律”是一种心理学效应，是由爱德华·墨菲（Edward A. Murphy）提出的。<br>主要内容：</p><ol><li>任何事都没有表面看起来那么简单；</li><li>所有的事都会比你预计的时间长；</li><li>会出错的事总会出错；</li><li>如果你担心某种情况发生，那么它就更有可能发生。</li></ol><p>墨菲定律的原句是这样的：如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导致灾难，则必定有人会做出这种选择。<br>这句话迅速流传。墨菲定律是其作出的著名论断，亦称墨菲定律、墨菲定理，是西方世界常用的俚语。<br>墨菲定律主要内容是：<code>如果事情有变坏的可能，不管这种可能性有多小，它总会发生。</code></p><h2 id="吸引力法则"><a href="#吸引力法则" class="headerlink" title="吸引力法则"></a><a href="http://baike.baidu.com/item/%E5%90%B8%E5%BC%95%E5%AE%9A%E5%BE%8B/10422186" target="_blank" rel="noopener">吸引力法则</a></h2><p>吸引定律，又称“吸引力法则”，指思想集中在某一领域的时候，跟这个领域相关的人、事、物就会被他吸引而来。<br>吸引力法则也是一种心理学理论,其观点和墨菲定律有相似之处.</p><h2 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a><a href="http://baike.baidu.com/view/17904.htm" target="_blank" rel="noopener">摩尔定律</a></h2><p>摩尔定律是由英特尔（Intel）创始人之一<a href="http://baike.baidu.com/view/59874.htm" target="_blank" rel="noopener">戈登·摩尔（Gordon Moore）</a>提出来的。 其内容为：当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18-24个月翻一倍以上。这一定律揭示了信息技术进步的速度。</p><h2 id="阿特伍德定律"><a href="#阿特伍德定律" class="headerlink" title="阿特伍德定律"></a>阿特伍德定律</h2><p>Jeff Atwood在2007年的一篇博客文章中提出，“any application that can be written in JavaScript, will eventually be written in JavaScript”，意即“任何可以用JavaScript来写的应用，最终都将用JavaScript来写”。这就是所谓的阿特伍德定律（Atwood’s Law）。</p><blockquote><p>相关链接<br><a href="https://blog.codinghorror.com/the-principle-of-least-power/" target="_blank" rel="noopener">the principle of least power</a><br><a href="https://blog.codinghorror.com/all-programming-is-web-programming/" target="_blank" rel="noopener">all programming is web programming</a><br>中文译文 <a href="http://blog.csdn.net/happydeer/article/details/24105959" target="_blank" rel="noopener">所有编程皆为Web编程</a><br><a href="http://blog.jobbole.com/48296/" target="_blank" rel="noopener">深入理解Atwood定律</a></p></blockquote><ul><li>虽然本身身为一名web程序员,很期待这样的发展,但是,本身对于此定律,还是要有批判性的阅读,当做一篇很有意思的文章来阅读吧,仅此而已.<blockquote><p>大牛的一些名言听起来似是而非，不经过细致的阅读是很难真正理解其逻辑的，而且即使细致阅读了，可能因为思维方式和实践机会的限制，完全理解其精髓也是很难的，在这样低的基础上再想有什么创新就更难了。这大概也是中关村的挨踢水平远远低于硅谷，中国的互联网公司大都只能依赖山寨的方式生存的原因吧。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;各种定律&quot;&gt;&lt;a href=&quot;#各种定律&quot; class=&quot;headerlink&quot; title=&quot;各种定律&quot;&gt;&lt;/a&gt;各种定律&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;包括计算机领域,心理学等,都有很多很有意思的定律,这是遇到的一些定律,这里做一个记录&lt;/p&gt;&lt;/bl
      
    
    </summary>
    
    
    
      <category term="杂记" scheme="https://nnorland.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>angular-controller-directive-factory</title>
    <link href="https://nnorland.github.io/2016/10/24/JavaScript/angular-controller-directive-factory/"/>
    <id>https://nnorland.github.io/2016/10/24/JavaScript/angular-controller-directive-factory/</id>
    <published>2016-10-24T03:06:50.000Z</published>
    <updated>2023-01-15T02:37:22.880Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>要了解使用方式的话，先要简（shen）单（ru）理解 Controller、Directive 和 Factory 分别是什么。<br>文章主旨：Angular 2 就是 Angular 1.x 最佳实践的延伸，所以了解 Angular 2 中的做法，就可以了解 Angular 1.x 中应该怎么做。。<br>作者：Trotyl Yu<br>链接：<a href="https://www.zhihu.com/question/27836513/answer/76686560" target="_blank" rel="noopener">https://www.zhihu.com/question/27836513/answer/76686560</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p></blockquote><h2 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. Controller"></a>1. Controller</h2><p>Controller 虽然叫 Controller，但远没有后端框架中的 Controller 那么复杂的作用，Angular 1.x 中的 Controller，说得不好听一下，就仅仅是一个初始化器（Initializer），进行相关的数据绑定（包括字段和方法）而已，一般的初学者用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 1.x with $scope in ES5</span></span><br><span class="line">myApp.controller(<span class="string">'myController'</span>, [<span class="string">'$scope'</span>, <span class="string">'itemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, itemService</span>) </span>&#123;</span><br><span class="line">  $scope.currentItem = itemService.current();</span><br><span class="line">  $scope.items = itemService.all();</span><br><span class="line">  $scope.add = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    itemService.add(item);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>可以看到，上面的代码中，Controller 干的事情仅仅就是把相应的数据或者方法绑定到 ViewModel 中。随着 Angular 1.2 中 Controller As 语法的到来，就不再需要 $scope 了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 1.x with 'controller as' in ES5</span></span><br><span class="line">myApp.controller(<span class="string">'myController'</span>, [<span class="string">'itemService'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">itemService</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currentItem = itemService.current();</span><br><span class="line">  <span class="keyword">this</span>.items = itemService.all();</span><br><span class="line">  <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    itemService.add(item);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p>这样，就可以抛弃 $scope 了（其实事件传递还是有可能用到）。看到 this 之后，我们不妨思考一下，这些属性到底是对象独有的还是类（严格地说JavaScript中叫原型）共有的呢？通常都是后者，即只要是这个 Controller，都要有这些属性。这样，我们就可以考虑，把不变性的内容（比如基本上所有的方法）作为原型的属性而非对象的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 1.x with 'controller as' in ES5</span></span><br><span class="line">myApp.controller(<span class="string">'myController'</span>, [<span class="string">'itemService'</span>, ItemController]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ItemController</span>(<span class="params">itemService</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currentItem = itemService.current();</span><br><span class="line">  <span class="keyword">this</span>.items = itemService.all();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ItemController.protoype.add = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    itemService.add(item);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就避免了把一坨方法绑定也挤到 Controller 里，也可以更清晰的看出 Controller 的初始化作用。（this 会顺着原型链查找的，但是可能很多用 Angular 的人并没有清晰的看到 Angular 仍然是普通的 JavaScript。）然后，随着 ES6 的流行，我们可以很轻松的转换成 ES6 的版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 1.x with 'controller as' in ES6</span></span><br><span class="line">myApp.controller(<span class="string">'myController'</span>, [<span class="string">'itemService'</span>, ItemController]);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(itemService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemService = itemService;</span><br><span class="line">    <span class="keyword">this</span>.currentItem = itemService.current();</span><br><span class="line">    <span class="keyword">this</span>.items = itemService.all();</span><br><span class="line">  &#125;</span><br><span class="line">  add(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemService.add(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，因为 Controller 的作用就只是初始化，在有了类（class）的情况下，就完全可以被同化到 class 的 constructor 里面了。如果开发人员喜欢静态类型的话，还可以使用 TypeScript，也就相当于在 ES6 的基础上增加了一个静态的类型系统：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 1.x with 'controller as' in TypeScript</span></span><br><span class="line">myApp.controller(<span class="string">'myController'</span>, [<span class="string">'itemService'</span>, ItemController]);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">  private currentItem: Item;</span><br><span class="line">  private items: Item[];</span><br><span class="line">  <span class="keyword">constructor</span>(private itemService: ItemService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentItem = itemService.current();</span><br><span class="line">    <span class="keyword">this</span>.items = itemService.all();</span><br><span class="line">  &#125;</span><br><span class="line">  add(item: Item): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemService.add(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，用到了 TypeScript 的一个语法糖，即在构造函数的参数名前加上可访问性修饰符（private、public）可以直接添加为实例的属性。最后，我们就可以很容易理解 Angular 2 中的写法了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Angular 2 in TypeScript</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">  private currentItem: Item;</span><br><span class="line">  private items: Item[];</span><br><span class="line">  <span class="keyword">constructor</span>(private itemService: ItemService) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentItem = itemService.current();</span><br><span class="line">    <span class="keyword">this</span>.items = itemService.all();</span><br><span class="line">  &#125;</span><br><span class="line">  add(item: Item): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemService.add(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 TypeScript 提供了 Metadata 支持，Angular 2 可以直接按类型注入（当然也依然可以使用按名注入，如果有特殊需求的话），不需要再手动键入依赖名称了。</p><p>综上所述，Controller 唯一的作用就是初始化，除了从外部到 ViewModel 的简单赋值（或极其简单的运算外），其他所有过程都不应该出现在 Controller 中。</p><h2 id="2-Directive"><a href="#2-Directive" class="headerlink" title="2. Directive"></a>2. Directive</h2><p>Angular 1.x 中的一个奇葩问题就是把所有自定义的 HTML 扩展都叫做 Directive，引起了很多误会。Angular 中的 Directive 按用途分为三种：</p><ul><li>Component Directive</li><li>Attribute Directive</li><li>Structural Directive</li></ul><p>Structural Directive 是最特殊的，相当于一般 MVC 框架中 Template 的关键字，作用是影响 HTML 的文档结构而非特定元素，比如 ngRepeat、ngInclude、ngIf、ngSwtich 等。</p><p>另外两种的话就很好分了，不出意外的话 restrict: ‘E’ 就是 Component Directive，restrict: ‘A’ 就是 Attribute Directive，前者作为一个独立元素（或者说组件）存在，比如 ngForm，后者影响现有元素/组件的某些效果，比如 ngClass、ngModel、ngSrc、ngStyle、ngClick 等。（在 Angular 2 中由于引入了通用的属性绑定和事件绑定机制如 [class.someKey]=”someValue”、[style.someKey]=”someValue”、[src]=”someValue”、(click)=”someMethodCall()”，所以对原有属性的封装和对原生事件的封装的 Attribute Directive 都不需要了）</p><p>Angular 1.x 中，controller 既可以作为 Component Directive 的属性也可以作为 Attribute Directive 的属性（比如 ngController、ngView），但是由于由 ngController 的存在，近乎于可以创造独立于 Directive 的 Controller。Angular 2 中废弃了 ngController 这个存在，所有需要用到 Controller （或者说 Constructor）的地方都需要自己定义相应的 Directive。</p><p>综上所述（虽然好像并没有怎么述），Angular 的哲学理念就是保证 View 层尽可能的使用声明式语法（而非命令式语法），一切初始化相关的东西都放在 Controller 中（慎用 ngInit），所有需要用到 Controller 的地方都封装成自己的 Directive。</p><h2 id="3-Factory？"><a href="#3-Factory？" class="headerlink" title="3. Factory？"></a>3. Factory？</h2><p>如果说的是 Provider、Factory、Service、Value、Constant 的总称的话，一般来说并没有 Factory 的叫法，要么叫 Service（官方早期是这么叫的，但是会有 a Service is a Service 这种跨层次重名情况），或者叫 Provider（除 Constant 外本质上都是 Provider，Value 和 Service 是调用的 Factory，Factory 是调用的 Provider），或者高雅一点叫 Dependency。这里暂时叫一下 Provider，如果不习惯的话，脑补成别的名词就好。。</p><p>其实如果按本文这种顺序的话，用下排除法就知道什么时候该用 Provider 了，所有没有在上面两者的职责内的情况，包括但不仅限于网络、存储等其他一切与展示逻辑无关的内容。</p><p>至于这几个东东内部的区别，The Provider（不是泛指）的话具有可配置性，可以在程序运行前进行相应的设定；Factory 和 Service 除了写法上没有什么区别，喜欢用什么用什么，不一定要按它的名字来；Value 和 Constant 为单个对象依赖，Constant 可以在 Provider 的配置阶段使用，其他都不能。Angular 2 把上面这些东西的名词叫法合并了，虽然实际上并没有什么功能上的改变。（不过，依赖注入的机制倒是改了不少。）</p><p>综上所述，所有与展示逻辑（或者说交互逻辑）无关的部分都应该写成 Provider（广义的）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;要了解使用方式的话，先要简（shen）单（ru）理解 Controller、Directive 和 Factory 分别是什么。&lt;br&gt;文章主旨：Angular 2 就是 Angular 1.x 最佳实践的延伸，所以了解 Angular 2 中的做法
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
      <category term="angular" scheme="https://nnorland.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>认识WebSocket</title>
    <link href="https://nnorland.github.io/2016/10/21/JavaScript/web-socket-first/"/>
    <id>https://nnorland.github.io/2016/10/21/JavaScript/web-socket-first/</id>
    <published>2016-10-21T08:29:22.000Z</published>
    <updated>2023-01-15T02:37:22.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在HTML5规范中，我最喜欢的Web技术就是正迅速变得流行的WebSocket API。WebSocket提供了一个受欢迎的技术，以替代我们过去几年一直在用的Ajax技术。这个新的API提供了一个方法，从客户端使用简单的语法有效地推动消息到服务器。让我们看一看HTML5的WebSocket API：它可用于客户端、服务器端。而且有一个优秀的第三方API，名为Socket.IO。</p></blockquote><h1 id="1-什么是WebSocket-API"><a href="#1-什么是WebSocket-API" class="headerlink" title="1. 什么是WebSocket API?"></a>1. 什么是WebSocket API?</h1><p>WebSocket API是下一代客户端-服务器的异步通信方法。该通信取代了单个的TCP套接字，使用ws或wss协议，可用于任意的客户端和服务器程序。WebSocket目前由W3C进行标准化。WebSocket已经受到Firefox 4、Chrome 4、Opera 10.70以及Safari 5等浏览器的支持。</p><p>WebSocket API最伟大之处在于服务器和客户端可以在给定的时间范围内的任意时刻，相互推送信息。WebSocket并不限于以Ajax(或XHR)方式通信，因为Ajax技术需要客户端发起请求，而WebSocket服务器和客户端可以彼此相互推送信息；XHR受到域的限制，而WebSocket允许跨域通信。</p><p>Ajax技术很聪明的一点是没有设计要使用的方式。WebSocket为指定目标创建，用于双向推送消息。</p><h1 id="2-WebSocket-API的用法"><a href="#2-WebSocket-API的用法" class="headerlink" title="2. WebSocket API的用法"></a>2. WebSocket API的用法</h1><p>只专注于客户端的API，因为每个服务器端语言有自己的API。下面的代码片段是打开一个连接，为连接创建事件监听器，断开连接，消息时间，发送消息返回到服务器，关闭连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建一个Socket实例</span><br><span class="line">var socket &#x3D; new WebSocket(&#39;ws:&#x2F;&#x2F;localhost:8080&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打开Socket</span><br><span class="line">socket.onopen &#x3D; function(event) &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 发送一个初始化消息</span><br><span class="line">  socket.send(&#39;I am the client and I\&#39;m listening!&#39;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 监听消息</span><br><span class="line">  socket.onmessage &#x3D; function(event) &#123;</span><br><span class="line">    console.log(&#39;Client received a message&#39;,event);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 监听Socket的关闭</span><br><span class="line">  socket.onclose &#x3D; function(event) &#123;</span><br><span class="line">    console.log(&#39;Client notified socket has closed&#39;,event);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 关闭Socket....</span><br><span class="line">  &#x2F;&#x2F;socket.close()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们来看看上面的初始化片段。参数为URL，ws表示WebSocket协议。onopen、onclose和onmessage方法把事件连接到Socket实例上。每个方法都提供了一个事件，以表示Socket的状态。</p><p>onmessage事件提供了一个data属性，它可以包含消息的Body部分。消息的Body部分必须是一个字符串，可以进行序列化/反序列化操作，以便传递更多的数据。</p><p>WebSocket的语法非常简单，使用WebSockets是难以置信的容易……除非客户端不支持WebSocket。IE浏览器目前不支持WebSocket通信。如果你的客户端不支持WebSocket通信，下面有几个后备方案供你使用：</p><p>Flash技术 —— Flash可以提供一个简单的替换。 使用Flash最明显的缺点是并非所有客户端都安装了Flash，而且某些客户端，如iPhone/iPad，不支持Flash。</p><p>AJAX Long-Polling技术 —— 用AJAX的long-polling来模拟WebSocket在业界已经有一段时间了。它是一个可行的技术，但它不能优化发送的信息。也就是说，它是一个解决方案，但不是最佳的技术方案。</p><p>由于目前的IE等浏览器不支持WebSocket，要提供WebSocket的事件处理、返回传输、在服务器端使用一个统一的API，那么该怎么办呢？幸运的是，Guillermo Rauch创建了一个Socket.IO技术。</p><h1 id="3-带Socket-IO的WebSocket"><a href="#3-带Socket-IO的WebSocket" class="headerlink" title="3. 带Socket.IO的WebSocket"></a>3. 带Socket.IO的WebSocket</h1><p>Socket.IO是Guillermo Rauch创建的WebSocket API，Guillermo Rauch是LearnBoost公司的首席技术官以及LearnBoost实验室的首席科学家。Socket.IO使用检测功能来判断是否建立WebSocket连接，或者是AJAX long-polling连接，或Flash等。可快速创建实时的应用程序。Socket.IO还提供了一个NodeJS API，它看起来非常像客户端API。<br>建立客户端Socket.IO</p><p>Socket.IO可以从GitHub下载，可以把socket.io.js文件包含到页面中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://cdn.socket.io/stable/socket.io.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>此时，Socket.IO在此页面上是有效的，是时候创建Socket了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Socket.IO实例，建立连接</span></span><br><span class="line"><span class="keyword">var</span> socket= <span class="keyword">new</span> io.Socket(<span class="string">'localhost'</span>,&#123;</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line">&#125;);</span><br><span class="line">socket.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个连接监听器</span></span><br><span class="line">socket.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Client has connected to the server!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个连接监听器</span></span><br><span class="line">socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a message from the server!'</span>,data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个关闭连接的监听器</span></span><br><span class="line">socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The client has disconnected!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Socket发送一条消息到服务器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessageToServer</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  socket.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Socket.IO简化了WebSocket API，统一了返回运输的API。传输包括：<br>WebSocket<br>Flash Socket<br>AJAX long-polling<br>AJAX multipart streaming<br>IFrame<br>JSONP polling</p><p>你还可以设置任意的Socket.IO构造器的第二个选项，选项包括：</p><p>port - 待连接的端口<br>transports - 一个数组，包含不同的传输类型<br>transportOptions - 传输的参数使用的对象，带附加属性</p><p>Socket.IO还提供了由本地WebSocket API提供的普通连接、断开连接、消息事件。Socket还提供了封装每个事件类型的方法。</p><p>四、NodeJS和Socket.IO联合开发</p><p>Socket.IO提供的服务器端解决方案，允许统一的客户端和服务器端的API。使用Node，你可以创建一个典型的HTTP服务器，然后把服务器的实例传递到Socket.IO。从这里，你创建连接、断开连接、建立消息监听器，跟在客户端一样。</p><p>一个简单的服务器端脚本看起来如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要HTTP 模块来启动服务器和Socket.IO</span></span><br><span class="line"><span class="keyword">var</span> http= <span class="built_in">require</span>(<span class="string">'http'</span>), io= <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在8080端口启动服务器</span></span><br><span class="line"><span class="keyword">var</span> server= http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 发送HTML的headers和message</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>,&#123; <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span> &#125;);</span><br><span class="line">  res.end(<span class="string">'&lt;h1&gt;Hello Socket Lover!&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Socket.IO实例，把它传递给服务器</span></span><br><span class="line"><span class="keyword">var</span> socket= io.listen(server);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个连接监听器</span></span><br><span class="line">socket.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 成功！现在开始监听接收到的消息</span></span><br><span class="line">  client.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Received message from client!'</span>,event);</span><br><span class="line">  &#125;);</span><br><span class="line">  client.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearInterval(interval);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server has disconnected'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你可以运行服务器部分，假定已安装了NodeJS，从命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node socket-server.js</span><br></pre></td></tr></table></figure><p>现在客户端和服务器都能来回推送消息了！在NodeJS脚本内，可以使用简单的JavaScript创建一个定期消息发送器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个定期（每5秒）发送消息到客户端的发送器</span></span><br><span class="line"><span class="keyword">var</span> interval= setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  client.send(<span class="string">'This is a message from the server! '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">&#125;,<span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>服务器端将会每5秒推送消息到客户端！</p><p>五、dojox.Socket和Socket.IO</p><p>Persevere的创建者Kris Zyp创建了dojox.Socket。dojox.Socket以Dojo库一致的方式封装了WebSocket API，用于在客户端不支持WebSocket时，使用long-polling替代。</p><p>下面是怎样在客户端使用dojox.Socket和在服务器端使用Socket.IO的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args, ws= <span class="keyword">typeof</span> WebSocket!= <span class="string">'undefined'</span>;</span><br><span class="line"><span class="keyword">var</span> socket= dojox.socket(args= &#123;</span><br><span class="line">  url: ws? <span class="string">'/socket.io/websocket'</span> : <span class="string">'/socket.io/xhr-polling'</span>,</span><br><span class="line">  headers:&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-urlencoded'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  transport: <span class="function"><span class="keyword">function</span>(<span class="params">args, message</span>)</span>&#123;</span><br><span class="line">    args.content = message; <span class="comment">// use URL-encoding to send the message instead of a raw body</span></span><br><span class="line">    dojo.xhrPost(args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> sessionId;</span><br><span class="line">socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!sessionId)&#123;</span><br><span class="line">    sessionId= message;</span><br><span class="line">    args.url += <span class="string">'/'</span> + sessionId;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(message.substr(<span class="number">0</span>, <span class="number">3</span>) == <span class="string">'~h~'</span>)&#123;</span><br><span class="line">   <span class="comment">// a heartbeat</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>dojox.socket.Reconnect还创建了在套接字失去连接时自动重连。期待包含dojox.Socket的Dojo 1.6版本早日发布。</p><p>六、实际应用和WebSocket资源</p><p>有很多WebSocke的实际应用。WebSocket对于大多数客户机-服务器的异步通信是理想的，在浏览器内聊天是最突出的应用。WebSocket由于其高效率，被大多数公司所使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;在HTML5规范中，我最喜欢的Web技术就是正迅速变得流行的WebSocket API。WebSocket提供了一个受欢迎的技术，以替代我们过去几年一直在用的Ajax技术。这个新的API提供了一个方法，从客户端使用简单的语法有效地推动消息到服务器。让
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="WebSocket" scheme="https://nnorland.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>progressive-web</title>
    <link href="https://nnorland.github.io/2016/10/21/FrontEnd/progressive-web/"/>
    <id>https://nnorland.github.io/2016/10/21/FrontEnd/progressive-web/</id>
    <published>2016-10-21T08:24:01.000Z</published>
    <updated>2023-01-15T02:37:22.879Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Progressive Web App 是 Google 在 Web 平台开始推广的一个新概念，可以理解为是尽可能借助目前的新技术（比如 Service Worker ， Push Notification 及其他展现层的新技术），让 Web App 的体验无限接近 Native App 。</p></blockquote><p>参考文章:<br><a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">https://addyosmani.com/blog/getting-started-with-progressive-web-apps/</a></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><h2 id="Getting-started-with-Progressive-Web-Apps"><a href="#Getting-started-with-Progressive-Web-Apps" class="headerlink" title="Getting started with Progressive Web Apps"></a>Getting started with Progressive Web Apps</h2><p>There’s been much welcome discussion about Progressive Web Apps lately. They’re still a relatively new model, but their principles can equally enhance apps built with vanilla JS, React, Polymer, Angular or any other framework. In this post, I’ll summarise some options and reference apps for getting started with your own PWApp today.</p><h3 id="What-is-a-Progressive-Web-App"><a href="#What-is-a-Progressive-Web-App" class="headerlink" title="What is a Progressive Web App?"></a>What is a Progressive Web App?</h3><blockquote><p>A Progressive Web App uses modern web capabilities to deliver an app-like user experience. They evolve from pages in browser tabs to immersive, top-level apps, maintaining the web’s low friction at every moment.</p></blockquote><p>** It’s important to remember that Progressive Web Apps work everywhere but are supercharged in modern browsers. Progressive enhancement is a backbone of the model. **</p><p>Aaron Gustafson likened progressive enhancement to a peanut M&amp;M. The peanut is your content, the chocolate coating is your presentation layer and your JavaScript is the hard candy shell. This layer can vary in color and the exerience can vary depending on the capabilities of the browser using it.</p><p>Think of the candy shell as where many Progressive Web App features can live. They are experiences that combine the best of the web and the best of apps. They are useful to users from the very first visit in a browser tab, no install required.</p><p>As the user builds a relationship with these apps through repeat use, they make the candy shell even sweeter - loading very fast on slow network connections (thanks to Service Worker), sending relevant Push Notifications and having a first-class icon on the user’s homescreen that can load them as fullscreen app experiences. They can also take advantage of smart web app install banners.</p><p>Web app install banners for engagement, launch from the user’s homescreen, splash screen in Chrome for Android, works offline with Service Worker</p><h4 id="Progressive-Web-Apps-are"><a href="#Progressive-Web-Apps-are" class="headerlink" title="Progressive Web Apps are:"></a>Progressive Web Apps are:</h4><p>Progressive - Work for every user, regardless of browser choice because they’re built with progressive enhancement as a core tenet.<br>Responsive - Fit any form factor, desktop, mobile, tablet, or whatever is next.<br>Connectivity independent - Enhanced with service workers to work offline or on low quality networks.<br>App-like - Use the app-shell model to provide app-style navigations and interactions.<br>Fresh - Always up-to-date thanks to the service worker update process.<br>Safe - Served via TLS to prevent snooping and ensure content hasn’t been tampered with.<br>Discoverable - Are identifiable as “applications” thanks to W3C manifests and service worker registration scope allowing search engines to find them.<br>Re-engageable - Make re-engagement easy through features like push notifications.<br>Installable - Allow users to “keep” apps they find most useful on their home screen without the hassle of an app store.<br>Linkable - Easily share via URL and not require complex installation.<br>Progressive Web Apps also aren’t unique to Chrome for Android. Below we can see the Pokedex Progressive Web App working in Firefox for Android (Beta) with early Add to Homescreen and Service Worker caching features running just fine.</p><h5 id="Progressive-web-apps-working-in-Firefox-for-Android"><a href="#Progressive-web-apps-working-in-Firefox-for-Android" class="headerlink" title="Progressive web apps working in Firefox for Android"></a>Progressive web apps working in Firefox for Android</h5><p>One of the nice aspects of the “progressive” nature to this model is that features can be gradually unlocked as browser vendors ship better support for them. Progressive Web Apps such as Pokedex also of course work great in Opera on Android too with a few notable differences in implementation:</p><h5 id="Progressive-web-apps-working-in-Opera-for-Android"><a href="#Progressive-web-apps-working-in-Opera-for-Android" class="headerlink" title="Progressive web apps working in Opera for Android"></a>Progressive web apps working in Opera for Android</h5><p>For diving deeper into Progressive Web Apps, read Alex Russell’s original blog post introducing them. Paul Kinlan also started a very useful Stack Overflow tag for Progressive Web Apps worth checking out.</p><h3 id="Principles"><a href="#Principles" class="headerlink" title="Principles"></a>Principles</h3><h4 id="Web-App-Manifest"><a href="#Web-App-Manifest" class="headerlink" title="Web App Manifest"></a>Web App Manifest</h4><p>The Manifest for Web applications is a simple JSON file that gives you, the developer, the ability to control how your app appears to the user in the areas that they would expect to see apps (for example the device home screen), direct what the user can launch and more importantly how they can launch it</p><p>The manifest enables your web app to have a more native-like presence on the user’s homescreen. It allows the app to be launched in full-screen mode (without a URL bar being present), provides control over the screen orientation and in recent versions of Chrome on Android supports defining a Splash Screen and theme color for the address bar. It is also used to define a set of icons by size and density used for the aforementioned Splash screen and homescreen icon.</p><p>Add to homescreen, launch from homescreen and full-screen app-like experiences.</p><p>A sample manifest file can be found in Web Starter Kit and over in the Google Chrome samples. Bruce Lawson wrote a Manifest Generator and Mounir Lamouri has also written a handy Web Manifest validator worth checking out.</p><p>In my personal projects, I rely on realfavicongenerator to generate the correctly sized icons for both the Web App manifest and for use across iOS, desktop and so on. The favicons Node module is also able to achieve a similar output as part of your build process.</p><p>Chromium-based browsers (Chrome, Opera etc.) support Web App manifests today with Firefox actively developing support and Edge listing them as under consideration. WebKit/Safari have not yet posted public signals about their intents to implement the feature just yet.</p><p>For more details, read Installable Web Apps with the WebApp Manifest in Chrome for Android on Web Fundamentals.</p><h4 id="Add-to-Home-Screen-Banner"><a href="#Add-to-Home-Screen-Banner" class="headerlink" title="Add to Home Screen Banner"></a>Add to Home Screen Banner</h4><p>Chrome on Android has support adding in your site to the homescreen for a while now, but recent versions also support proactively suggesting sites be added using native Web App install banners.</p><p>The voice memos demo application displaying a webapp install banner prompt in Chrome for Android</p><p>In order for the app install prompts to display your app must:</p><p>Have a valid Web App manifest<br>Be served over HTTPS (see letsencrypt for a free certificate)<br>Have a valid service worker registered<br>Be visited twice, with at least 5 minutes between visits<br>A number of App Install banner samples are available, covering basic banners through to more complex use-cases like displaying related applications.</p><h4 id="Service-Worker-for-offline-caching"><a href="#Service-Worker-for-offline-caching" class="headerlink" title="Service Worker for offline caching"></a>Service Worker for offline caching</h4><p>A service worker is a script that runs in the background, separate from your web page. It responds to events, including network requests made from pages it serves. A service worker has an intentionally short lifetime.</p><p>It wakes up when it gets an event and runs only as long as it needs to process it. Service worker allows you to use the Cache API to cache resources and can be used to provide users with an offline experience.</p><p>Service workers are powerful for offline caching but they also offer significant performance wins in the form of instant loading for repeat visits to your site or web app. You can cache your application shell so it works offline and populate its content using JavaScript.</p><p>Service worker caching of the application shell, allowing it to load without the network</p><p>A comprehensive set of service worker samples are available over on Google Chrome samples. Jake Archibald’s offline cookbook is a must-read and I highly recommend trying out Paul Kinlan’s your first offline web app walkthrough if new to service worker.</p><p>Our team also maintain a number of Service Worker helper utilities and build tools that we find useful for reducing the overhead in getting Service Worker setup. They’re listed over on Service Worker Libraries. The two main ones are:</p><p>sw-precache: a build-time tool that generates a service worker script useful for precaching your web app shell<br>sw-toolbox: a library providing runtime caching for infrequently used resources<br>Jeff Posnick wrote a quick primer on sw-precache called Offline-first, fast, with the sw-precache module and a codelab on the same tool that you might find useful.</p><p>Dean Hume also has a very well written post on getting started with sw-toolbox worth checking out.</p><p>Chrome, Opera and Firefox have all implemented support for Service Worker with Edge having positive public signals about interest in the feature. Safari briefly mentioned interest in it via one engineer’s proposed five year plan.</p><h4 id="Push-Notifications-for-re-engagement"><a href="#Push-Notifications-for-re-engagement" class="headerlink" title="Push Notifications for re-engagement"></a>Push Notifications for re-engagement</h4><p>Push notifications allow your users to opt-in to timely updates from sites they love and allow you to effectively re-engage them with customized, engaging content.</p><p>Effectively, you can build web apps that users can engage with outside of a tab. The browser can be closed and they don’t even need to be actively using your web app to engage with your experience. The feature requires both service worker and a Web App manifest, building on some of the features summarised earlier.</p><p>The Push API is implemented in Chrome, in development in Firefox and under consideration in Edge. There are no public signals from Safari about their intent to implement this feature just yet.</p><p>Push Notifications on the Open Web is a comprehensive intro to getting Push setup by Matt Gaunt and a Push Notifications codelab is also available on Web Fundamentals.</p><p>Web push notification on the Facebook mobile site</p><p>Michael van Ouwerkerk from the Chrome team also has a 6 min intro to Push if you’re more video inclined.</p><h4 id="Layering-in-advanced-features"><a href="#Layering-in-advanced-features" class="headerlink" title="Layering in advanced features"></a>Layering in advanced features</h4><p>Remember, your user experience can have different levels of sweetness depending on the browser being used to view your web app. You’re in control of the hard candy shell.</p><p>Additional features coming to the web platform such as Background Syncronisation (for data sync with a server even when your web app is closed) and Web Bluetooth (for talking to Bluetooth devices from your web app) can also be layered into your Progressive Web App in this manner.</p><p>One-shot Background Sync has been enabled in Chrome and Jake Archibald has a video of his Offline wikipedia app and article demonstrating it in action. Francois Beaufort also has a number of Web Bluetooth samples available if interested in trying out that API.</p><h4 id="Framework-friendly"><a href="#Framework-friendly" class="headerlink" title="Framework-friendly"></a>Framework-friendly</h4><p>There’s really nothing stopping you from applying any of the above principles to an existing application or framework you’re building with. A few other principles worth keeping in mind while building your Progressive Web App are the RAIL user-centric performance model and FLIP based animations.</p><p>I’m hopeful that during 2016, we’ll see an increasing number of boilerplates and seed projects organically baking in support for Progressive Web Apps as a first-class citizen. Until then, the barrier to adding these features to your own apps isn’t very high and are imo, quite worth the effort.</p><h4 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h4><p>There are different levels of how “all-in” one goes on the Progressive Web App model, but one common approach taken is architecting them around an Application Shell. This is not a hard requirement, but does come with several benefits.</p><p>The Application Shell architecture encourages caching your application shell (the User Interface) so it works offline and populate its content using JavaScript. On repeat visits, this allows you to get meaningful pixels on the screen really fast without the network, even if your content eventually comes from there. This comes with significant performance gains.</p><p>The application shell being visualised as breaking down the UI of your app, such as the drawer and the main content area</p><p>Jeremy Keith recently commented that in this type of model perhaps server-side rendering should not be viewed as a fallback but client-side rendering should be looked at as an enhancement. This is fair feedback.</p><p>In the Application Shell model, server-side rendering should be used as much as possible and client-side progressive rendering should be used as an enhancement in the same way that we “enhance” the experience when service worker is supported. There are many ways this can ultimately be approached.</p><p>My recommendation is reading our write-up on the architecture and evaluating how similar principles could be best applied to your own application and stack.</p><h2 id="Getting-Started-Boilerplates"><a href="#Getting-Started-Boilerplates" class="headerlink" title="Getting Started Boilerplates"></a>Getting Started Boilerplates</h2><h3 id="Application-Shell"><a href="#Application-Shell" class="headerlink" title="Application Shell"></a>Application Shell</h3><p>The app-shell repository contains a near-complete implementation of the Application Shell architecture. It has a backend written in Express.js and a front-end written in ES2015.</p><p>Given that it covers both client and server-side portions of the model and there’s quite a lot going on there, it will take some time to familiarise yourself with the codebase. It’s otherwise our most comprehensive Progressive Web App starting point right now. Docs will be our next focus for this project.</p><h3 id="Polymer-Starter-Kit"><a href="#Polymer-Starter-Kit" class="headerlink" title="Polymer Starter Kit"></a>Polymer Starter Kit</h3><p><a href="https://github.com/polymerelements/polymer-starter-kit" target="_blank" rel="noopener">View on GitHub</a></p><p>The official starting point for Polymer web apps supports the following Progressive Web App features:</p><p>Web Application manifest<br>Chrome for Android Splashscreen<br>Service Worker offline caching with the Platinum SW elements<br>Push Notifications (manual setup required) with the Platinum Push elements<br>Polymer starter kit displaying progressive web app features built in</p><p>The current version of PSK is missing support for some of the more advanced performance patterns (e.g Application Shell model, async loading) you find in some Progressive Polymer web apps.</p><p>We aim to try baking these patterns into PSK in 2016, but early experiments around this can be found in the Polymer Zuperkulblog app by Rob Dodson and the excellent Polymer Perf Patterns talk by Eric Bidelman.</p><h3 id="Web-Starter-Kit"><a href="#Web-Starter-Kit" class="headerlink" title="Web Starter Kit"></a>Web Starter Kit</h3><p><a href="https://github.com/google/web-starter-kit" target="_blank" rel="noopener">View on GitHub</a></p><p>Our opinionated starting point for new vanilla projects includes the following Progressive Web App features:</p><p>Web Application manifest<br>Chrome for Android Splashscreen<br>Service-worker pre-caching thanks to sw-precache<br>If you have a preference for working with vanilla JS/ES2015 and are unable to use Polymer, Web Starter Kit may prove useful as a reference point you can reuse or steal code snippets from.</p><h4 id="Progressive-Web-Apps-with-and-without-frameworks"><a href="#Progressive-Web-Apps-with-and-without-frameworks" class="headerlink" title="Progressive Web Apps with and without frameworks"></a>Progressive Web Apps with and without frameworks</h4><p>A number of open-source Progressive Web Apps have already been built by members of the community both with and without JS libraries and frameworks. If you’re looking for inspiration, the below repos might prove useful as reference. They’re also just pretty damn good apps.</p><p>Progressive web apps implemented using React, Polymer, Virtual DOM and AngularJS</p><h4 id="Vanilla-JS"><a href="#Vanilla-JS" class="headerlink" title="Vanilla JS"></a>Vanilla JS</h4><p>Voice Memos by Paul Lewis is built using a similar architecture to app-shell (write-up)<br>Offline Wikipedia by Jake Archibald (video)<br>Air Horner by Paul Kinlan<br>Guitar Tuner by Paul Lewis (write-up)<br>Polymer</p><p>Zuperkulblog by Rob Dodson (slides)<br>Snapdrop - an Apple Airdrop-like PWApp built with Polymer and Web RTC<br>React</p><p>iFixit by Jeff Posnick - uses sw-precache for application shell caching (slides)<br>Virtual-DOM</p><p>Pokedex by Nolan Lawson - excellent progressive web app applying a “do everything in a web worker” approach to help with progressive rendering. (write-up)<br>Angular.js</p><p>Timey.in by Kenneth Auchenberg - also uses sw-precache for resource precaching<br>The Angular team have also started an early ng2-application-shell project based on the app-shell architecture.<br>Closing notes</p><p>As mentioned, Progressive Web Apps are still in their infancy but it’s an exciting time to play around with the methodologies behind them and see how well they can apply to your own web apps.</p><p>Paul Kinlan is currently planning out the Web Fundamentals guidance on Progressive Web Apps and if you have input on areas you would like to see covered, please feel free to comment on-thread.</p><h3 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h3><p><a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/" target="_blank" rel="noopener">Progressive Web Apps: Escaping Tabs Without Losing Our Soul</a><br><a href="http://arc.applause.com/2015/11/30/application-shell-architecture/" target="_blank" rel="noopener">Why Progressive Web Apps Are The Future Of Web Development</a><br><a href="http://www.brucelawson.co.uk/2015/progressive-web-apps-ready-for-primetime/" target="_blank" rel="noopener">Progressive Web Apps: ready for primetime</a><br><a href="https://ponyfoo.com/articles/progressive-app-serviceworker" target="_blank" rel="noopener">Making a Progressive App with ServiceWorker</a><br><a href="https://dev.opera.com/blog/progressive-web-apps-future/" target="_blank" rel="noopener">Progressive Web Apps Are the Future</a><br><a href="http://tech-blog.flipkart.net/2015/11/progressive-web-app/" target="_blank" rel="noopener">Progressive Web App: A New Way to Experience Mobile</a><br><a href="https://developers.google.com/web/progressive-web-apps" target="_blank" rel="noopener">Web Fundamentals: Progressive Web Apps</a><br><a href="http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org" target="_blank" rel="noopener">Introducing Pokedex.org: a progressive webapp for Pokémon fans</a><br><a href="https://medium.com/@davideast/chrome-developer-summit-recap-1137b022b2dc#.nmj5drhvi" target="_blank" rel="noopener">Chrome Developer Summit Recap: Progressive Web Apps</a></p><p>Addy Osmani<br>Engineer at Google working on open web tooling</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;Progressive Web App 是 Google 在 Web 平台开始推广的一个新概念，可以理解为是尽可能借助目前的新技术（比如 Service Worker ， Push Notification 及其他展现层的新技术），让 Web App
      
    
    </summary>
    
    
      <category term="FrontEnd" scheme="https://nnorland.github.io/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>subscribe/publish 订阅/发布模式</title>
    <link href="https://nnorland.github.io/2016/10/20/JavaScript/Subscribe-Publish/"/>
    <id>https://nnorland.github.io/2016/10/20/JavaScript/Subscribe-Publish/</id>
    <published>2016-10-20T15:30:52.000Z</published>
    <updated>2023-01-15T02:37:22.880Z</updated>
    
    <content type="html"><![CDATA[<p>我们先引出问题的所在，这里使用一个订单系统：</p><p>在一个电子商务系统中，现在我们有订单模块，和信息模块两个主要模块，当下单成功时，我们用要发送订单信息的给客户。</p><p>下面是一个简单的解决办法，我们在一个类中调用另一个类的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 订单类，存储订单的所有变量和函数</span><br><span class="line">function Order( goods )&#123;</span><br><span class="line">    this.goods &#x3D; goods;</span><br><span class="line">&#125;</span><br><span class="line">Order.prototype &#x3D; &#123;</span><br><span class="line">    done: function()&#123;</span><br><span class="line">        &#x2F;&#x2F; 订单完成代码</span><br><span class="line">        this.sendSuccessMsg();</span><br><span class="line">    &#125;,</span><br><span class="line">    sendSuccessMsg: function()&#123;</span><br><span class="line">        var message &#x3D; new Message();</span><br><span class="line">        message.sendMsg(this.goods)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 消息类，具备各种消息功能函数</span><br><span class="line">function Message()&#123;&#125;</span><br><span class="line">Message.prototype &#x3D; &#123;</span><br><span class="line">    sendMsg: function( goods )&#123;</span><br><span class="line">        alert(&quot;商品名：&quot;+goods.name+&quot;\n&quot;+&quot;价格：&quot;+goods.price);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;其它信息模块的方法</span><br><span class="line">&#125;</span><br><span class="line">var order &#x3D; new Order(&#123; name:&quot;索尼耳机&quot;, price:100&#125;)</span><br><span class="line">order.done() &#x2F;&#x2F;弹出商品的信息</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">经过简单的分析代码，我们可以发现一些问题，首先，Order和Message紧耦合，一般来说，当一个类进行的修改会需要另一个类的修改这就是耦合。在这里，比较直接的一个问题，当我们改改了Message类中的sendMsg方法的名字或者参数时，Order类中的相应函数名和参数也要跟着修改。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">知道了这种方法的问题，下面我们就来看看如何用Publish&#x2F;Subscribe模式改进这段代码.Publish&#x2F;Subscribe模式是一种消息通信模式，信息发布一方叫发布者，信息的接收方叫订阅者。</span><br><span class="line"></span><br><span class="line">下面是一个根据Publish&#x2F;Subscribe模式的简易系统</span><br></pre></td></tr></table></figure><p>var subpub = {};<br>(function( subpub ){<br>var list = {};<br>subpub.publish = function(topic,msg){<br>for(var i = 0; i&lt;list[topic].length; i++) {<br>list[topic]<a href="msg">i</a>;<br>}<br>}<br>subpub.subscribe = function( topic,listener){<br>if(!list[topic]) list[topic] = [];<br>list[topic].push(listener);<br>}<br>})( subpub )</p><p>// 测试<br>subpub.subscribe(‘foo’, function(msg){<br>alert(msg);<br>});<br>subpub.publish(‘foo’, ‘Hello World!’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将这个事件管理小系统应用到之前的订单系统中，进行解耦。</span><br></pre></td></tr></table></figure><p>function Order( goods ){<br>this.goods = goods;<br>}<br>Order.prototype = {<br>done: function(){<br>// 订单完成代码<br>this.sendSuccessMsg();<br>},<br>sendSuccessMsg: function(){<br>subpub.publish(‘order/done’,this.goods);<br>}<br>}<br>function Message(){<br>subpub.subscribe(‘order/done’,this.sendMsg);<br>}<br>Message.prototype = {<br>sendMsg: function( goods ){<br>alert(“商品名：”+goods.name+”\n”+”价格：”+goods.price);<br>}<br>//其它信息模块的方法<br>}<br>var message = new Message();<br>var order = new Order({ name:”索尼耳机”, price:100});<br>order.done() //弹出商品的信息</p><pre><code>现在，我们发现Message和Order类不关心彼此如何实现。修改某个类中的函数不用考虑是否会影响到另一个类。不过有重要的一点是保存的事件标题。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们先引出问题的所在，这里使用一个订单系统：&lt;/p&gt;&lt;p&gt;在一个电子商务系统中，现在我们有订单模块，和信息模块两个主要模块，当下单成功时，我们用要发送订单信息的给客户。&lt;/p&gt;&lt;p&gt;下面是一个简单的解决办法，我们在一个类中调用另一个类的方法。&lt;/p&gt;&lt;figure clas
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>foo-bar</title>
    <link href="https://nnorland.github.io/2016/09/06/%E6%9D%82%E8%AE%B0/foo-bar/"/>
    <id>https://nnorland.github.io/2016/09/06/%E6%9D%82%E8%AE%B0/foo-bar/</id>
    <published>2016-09-06T06:03:58.000Z</published>
    <updated>2023-01-15T02:37:22.885Z</updated>
    
    <content type="html"><![CDATA[<p>“英文单词foo，不同的字典对其解释相去甚远，一说来自中国“福”字的发音，又有解释为二战时期的一种武器。然而若把众多的解释放在编程领域，关于 foobar的说法是我认为最为贴切的解释。foobar又为foo-bar，其中bar是beyond all recognition的缩写，通俗点就是无法识别，一塌糊涂的意思。</p><p>而foo是fu的变体，fu是英语习语fuck-up的缩写，同样是一团糟的意思。于是，若你有些编程经验，我想你应该已经明白了为何如今许多编程实例所涉及的事物均被冠名为foo”<br>—-摘自：编程黑马真言，王轶男。</p><p>至今约有212 个RFC， 或者约7%的RFC， 从[RFC269]开始，包括了术语’foo’,’bar’ 或’foobar’作为伪变量而没有任何适当的解释或定义。这可能被认为是微不足道的，但一些新来者，特别是那些非英语国家的人，在理解这些术语时会遇到困难。本文纠正这一问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“英文单词foo，不同的字典对其解释相去甚远，一说来自中国“福”字的发音，又有解释为二战时期的一种武器。然而若把众多的解释放在编程领域，关于 foobar的说法是我认为最为贴切的解释。foobar又为foo-bar，其中bar是beyond all recognition的
      
    
    </summary>
    
    
      <category term="杂记" scheme="https://nnorland.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://nnorland.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>jQuery插入元素动态绑定事件</title>
    <link href="https://nnorland.github.io/2016/08/29/JavaScript/jquery-on-append/"/>
    <id>https://nnorland.github.io/2016/08/29/JavaScript/jquery-on-append/</id>
    <published>2016-08-29T03:53:00.000Z</published>
    <updated>2017-01-11T08:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jQuery on()方法, 在选择元素上绑定一个或多个事件的事件处理函数。</p></blockquote><p>在jQuery 1.7以及之后的版本，.on()方法 提供绑定事件处理程序所需的所有功能。帮助从旧的jQuery事件方法转换， <a href="http://api.jquery.com/bind/" target="_blank" rel="noopener">.bind()</a>, <a href="http://api.jquery.com/delegate/" target="_blank" rel="noopener">.delegate()</a>, 和 <a href="http://api.jquery.com/live/" target="_blank" rel="noopener">.live()</a>.要删除的.on()绑定的事件，请参阅<a href="http://api.jquery.com/off/" target="_blank" rel="noopener">.off()</a>。</p><p>jQuery on()方法描述如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.on( events [, selector ] [, data ], handler(eventObject) )</span><br></pre></td></tr></table></figure><p>jquery中绑定事件一般使用bind，或者click，但是这只能是对已经加载好的元素定义事件，那些后来添加插入的元素则需要另行绑定。在1.7版本以前使用live。但是在1.7版本以后推荐使用on。这里介绍jQuery中如何给动态添加的元素绑定事件<br>在实际开发中会遇到要给动态生成的html元素绑定触发事件的情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testdiv"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要给<code>&lt;ul&gt;</code>里面动态添加的<code>&lt;li&gt;</code>标签添加click事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#testdiv ul"</span>).on(<span class="string">"click"</span>,<span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">//do something here</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>当事件冒泡到<code>#testdiv ul</code>时，检测事件的target，如果与传入的选择符（这里是<code>li</code>）匹配，就触发事件，否则不触发。</p><p><strong>一个简单的事件绑定如 <code>$(&#39;button&#39;).on(&#39;click&#39;,function(){});</code> 与<code>bind()</code>无二样。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;jQuery on()方法, 在选择元素上绑定一个或多个事件的事件处理函数。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在jQuery 1.7以及之后的版本，.on()方法 提供绑定事件处理程序所需的所有功能。帮助从旧的jQuery事件方法转换， &lt;a 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://nnorland.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>财务自由</title>
    <link href="https://nnorland.github.io/2016/08/24/%E6%9D%82%E8%AE%B0/Financial-independence/"/>
    <id>https://nnorland.github.io/2016/08/24/%E6%9D%82%E8%AE%B0/Financial-independence/</id>
    <published>2016-08-24T14:08:33.000Z</published>
    <updated>2016-08-31T13:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>财务自由，就是当你不工作的时候，也不必为金钱发愁，因为你有其他投资。当工作不是你养家糊口的惟一手段时，你便自由了，因而你也获得了快乐的基础，也达到了财务自由.—摘自<a href="http://baike.baidu.com/view/1722687.htm" target="_blank" rel="noopener">百度百科</a></p></blockquote><a id="more"></a><table><thead><tr><th align="left">财务自由</th></tr></thead><tbody><tr><td align="left">标准原则： 创造资产 减少负债管理日常开支</td></tr><tr><td align="left">公式表达 财务自由=被动收入&gt;花销</td></tr></tbody></table><p>35岁能财务自由吗 ? 不可能 ? 没出息.</p><hr><p>2016-08-31<br>先定一个能达到的小目标,比方说我先挣它一个亿.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;财务自由，就是当你不工作的时候，也不必为金钱发愁，因为你有其他投资。当工作不是你养家糊口的惟一手段时，你便自由了，因而你也获得了快乐的基础，也达到了财务自由.—摘自&lt;a href=&quot;http://baike.baidu.com/view/1722687.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="杂记" scheme="https://nnorland.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://nnorland.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
